@namespace WiiTrakClient.Features.SystemOwner.Components
@using System.ComponentModel.DataAnnotations
@using WiiTrakClient.Cores

<style>
    .validation-message {
    font-size:0;
    display:none;
    font-display:block;
    
    color: red;
}
.mud-input-helper-text.mud-input-error {
    font-size: 0;
}
.mud-input-helper-text {
    color: var(--mud-palette-text-secondary);
    margin: 0;
    font-size: 0;
    
}
        </style>
 
<MudDialog> 
    <DialogContent>              
        <div style="width: 400px;height:450px;overflow: auto;">
            <MudForm Model="@NewDriver" @ref=form @bind-IsValid="@success" @bind-Errors="@errors">   
                @*<MudSelect T="CompanyDto" Label="Select Company" Required=true @bind-Value="@_selectedCompany" 
                    AnchorOrigin="Origin.BottomCenter">
                    @foreach (var Company in Companys) 
                    {
                        <MudSelectItem T="CompanyDto" Value="@Company">@Company.Name</MudSelectItem> 
                    }
               </MudSelect> *@  
               <MudItem>
        <MudSelect T="CompanyDto" Label="Select Company" 
            AnchorOrigin="Origin.BottomCenter">
            @foreach (var company in Companys)
            {
                <MudSelectItem T="CompanyDto" Value="@company">@company.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
                <MudTextField class="my-6" @bind-Value="NewDriver.FirstName" Label="First Name" Required="true" RequiredError="" For="@(() => @NewDriver.FirstName)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewDriver.LastName" Label="Last Name" Required="true" RequiredError="" For="@(() => @NewDriver.LastName)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewDriver.Email" Label="Email" Required="true" RequiredError="" For="@(() => @NewDriver.Email)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewDriver.Phone" Label="Phone" Required="true" RequiredError="" For="@(() => @NewDriver.Phone)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewDriver.StreetAddress1" Required="true" RequiredError="" Label="Street Address 1" For="@(() => @NewDriver.StreetAddress1)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewDriver.StreetAddress2" Required="true" RequiredError="" Label="Street Address 2" For="@(() => @NewDriver.StreetAddress2)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewDriver.City" Label="City" Required="true" RequiredError="" For="@(() => @NewDriver.City)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewDriver.State" Label="State" Required="true" RequiredError="" For="@(() => @NewDriver.State)" Variant="Variant.Text"></MudTextField>
                @*<MudTextField class="my-6" @bind-Value="NewDriver.CountryCode" Label="Country Code" Required="true" RequiredError="" Variant="Variant.Text"></MudTextField>*@
                <MudTextField class="my-6" @bind-Value="NewDriver.PostalCode" Label="Zip Code" Required="true" RequiredError="" For="@(() => @NewDriver.PostalCode)" Variant="Variant.Text"></MudTextField>
                <div class="d-flex">
                    <MudButton OnClick="Cancel">Cancel</MudButton>
@*                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
*@                  <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="Submit" Class="ml-auto">Save</MudButton>
                    </div>
            </MudForm> 
        </div>
    </DialogContent>
    
</MudDialog>

@code {
    [Parameter]
    public DriverCreationDto? NewDriver {get; set;}
    
    public List<CompanyDto> Companys { get; set; } = new();

    public CompanyDto _selectedCompany = new();
    [Inject]
    public ICompanyHttpRepository CompanyRepository { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool success;
    string[] errors = { };
    MudForm form;

    protected override async Task OnInitializedAsync()
    { 
        Companys = await CompanyRepository.GetCompaniesBySystemOwnerIdAsync(CurrentUser.UserId);

        if (Companys.Count > 0)
        {
            _selectedCompany = Companys[0];
            NewDriver.CompanyId = _selectedCompany.Id;
        }
        
        
    } 
    protected override void OnParametersSet() {
            
    }

    void Submit() 
    { 
        MudDialog.Close(DialogResult.Ok(true)); 
    }
    void Cancel() => MudDialog.Cancel();
}
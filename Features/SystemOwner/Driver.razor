@page "/system-owner-driver"

@using WiiTrakClient.Features.SystemOwner.Components
@using WiiTrakClient.Cores

@inject IJSRuntime JsRuntime
@inject ISystemOwnerHttpRepository SystemOwnerHttpRepository
@inject IDialogService DialogService

@inject IDriverHttpRepository DriverHttpRepository
@inject IEmailHttpRepository EmailHttpRepository

<UserAuthentication />
<h1>Drivers</h1>

<div class="d-flex justify-end">
    <MudButton Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add"
               IconColor="Color.Secondary"
               Size="Size.Large"
               OnClick="OpenDialog">Add</MudButton>
</div>

<div class="my-8">
    @*    @if (LoaderVisibility)
        {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
        }
        else
        {

        if (_driver.Count > 0)
        {
        <DriverList Driver="@_driver" />
        }
        else
        {
        <MudText Class="my-4" Typo="Typo.h6">No data found.</MudText>
        }
        }*@

    @if (DriverList == null)
    {
        <MudText Class="my-4" Typo="Typo.h6">No data found.</MudText>

    }
    else if (driver.Count > 0)
    {
        <DriverList Driver="@driver" />
    }
    else
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
    }
</div>



@code {
    List<DriverDto> driver = new();
    List<DriverDto> DriverList = new();
    DriverDto AddDriver = new();

    private IJSObjectReference JsModule;

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.UserId == Guid.Empty)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            var Id = await JsModule.InvokeAsync<string>("getUserId");
            CurrentUser.UserId = new Guid(Id);
        }
        await RefreshDriverGrid();
    }

    private async Task OpenDialog()
    {
        var parameters = new DialogParameters();
        AddDriver = new DriverDto();
        parameters.Add("NewDriver", AddDriver);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };

        var dialog = DialogService.Show<AddDriverDialog>("Add Driver", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // add new driver to backend
            var driverCreation = new DriverDto
                {
                    CompanyId = AddDriver.CompanyId,
                    FirstName = AddDriver.FirstName,
                    LastName = AddDriver.LastName,
                    Email = AddDriver.Email,
                    Phone = AddDriver.Phone,
                    StreetAddress1 = AddDriver.StreetAddress1,
                    StreetAddress2 = AddDriver.StreetAddress2,
                    City = AddDriver.City,
                    State = AddDriver.State,
                    CountryCode = AddDriver.CountryCode,
                    PostalCode = AddDriver.PostalCode,
                    SystemOwnerId = CurrentUser.UserId,
                    IsActive = true,
                    IsSuspended = false
                };
            try
            {
                await DriverHttpRepository.CreateDriverAsync(driverCreation);
            }
            catch (Exception ex)
            {
                //Exception
            }
            #region Send Login details to User
            try
            {
                MailRequest request = new MailRequest();
                request.MailTo = driverCreation.Email;
                request.Name = string.Concat(driverCreation.FirstName, " ", driverCreation.LastName);
                await EmailHttpRepository.SendMailAsync(request);
            }
            catch (Exception ex)
            {
                
            }

            #endregion
        }
        await RefreshDriverGrid();
    }
    private async Task RefreshDriverGrid()
    {
        DriverList = await DriverHttpRepository.GetDriversBySystemOwnerIdAsync(CurrentUser.UserId);
        if (DriverList is not null)
        {
            driver = DriverList;
        }
        StateHasChanged();
    }
}

@using WiiTrakClient.Features.SystemOwner.Components
@inject IDialogService DialogService

@inject IStoreHttpRepository StoreHttpRepository
@using WiiTrakClient.Cores


   <MudTable Items="@Stores" Hover="true" SortLabel="Sort By">
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<StoreDto, object>(x=>x.StoreName)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel  SortBy="new Func<StoreDto, object>(x=>x.StoreNumber)">Store Number</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel  SortBy="new Func<StoreDto, object>(x=>x.StreetAddress1)">Street Address</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel  SortBy="new Func<StoreDto, object>(x=>x.City)">City</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel  SortBy="new Func<StoreDto, object>(x=>x.State)">State</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel  SortBy="new Func<StoreDto, object>(x=>x.PostalCode)">PostalCode</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel  SortBy="new Func<StoreDto, object>(x=>x.Longitude)">Longitude</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel  SortBy="new Func<StoreDto, object>(x=>x.Latitude)">Longitude</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.PhonePrimary)">Phone</MudTableSortLabel></MudTh>        
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            @context.StoreName
        </MudTd>
        <MudTd DataLabel="StoreNumber">
            @context.StoreNumber
        </MudTd>
        <MudTd DataLabel="StreetAddress1">
            @context.StreetAddress1
        </MudTd>
        <MudTd DataLabel="City">
            @context.City
        </MudTd>
        <MudTd DataLabel="State">
            @context.State
        </MudTd>

        <MudTd DataLabel="PostalCode">
            @context.PostalCode
        </MudTd>
        <MudTd DataLabel="Longitude">
            @context.Longitude
        </MudTd>
         <MudTd DataLabel="Latitude">
            @context.Latitude
        </MudTd>
        <MudTd DataLabel="Email">
            @context.Email
        </MudTd>
         <MudTd DataLabel="Phone">
            @context.PhonePrimary
        </MudTd>
     
        <MudTd DataLabel="Action">           
            <MudButton 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                OnClick="((e) => OpenDialog(context))">Update
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
    </PagerContent>
</MudTable> 


@code {
    [Parameter]
    public List<StoreDto>? Stores {get; set;} = null;
    private bool _enabled = true;
    public async Task OpenDialog(StoreDto store) {

         // TODO Update for store 
 
        Console.WriteLine("store id: " + store.Id);

        var parameters = new DialogParameters();
                parameters.Add("Store", store);   

         DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large }; 

         var dialog  = DialogService.Show<UpdateStoreDialog>("Update Store", parameters);
        var result = await dialog.Result; 

        if (!result.Cancelled) 
        {
            // save updated store to backend
            var storeUpdate = new StoreUpdateDto {
                StoreName = store.StoreName,
                StreetAddress1 = store.StreetAddress1,
                StreetAddress2 = store.StreetAddress2,
                City = store.City,
                State = store.State,
                PostalCode = store.PostalCode,
                ProfilePicUrl = store.ProfilePicUrl,
                Email = store.Email,
                PhonePrimary = store.PhonePrimary,
                PhoneSecondary = store.PhoneSecondary,
                ServiceProviderId = store.ServiceProviderId
            };
           await StoreHttpRepository.UpdateStoreAsync(store.Id, storeUpdate);
        } 
        Stores = await StoreHttpRepository.GetStoresByCorporateId(CurrentUser.UserId);
    }
}
@page "/sub-companies"

@using WiiTrakClient.Features.Companies.Components
@using WiiTrakClient.Cores
@inject IJSRuntime JsRuntime
@inject ICompanyHttpRepository CompanyRepository
@inject IDialogService DialogService


<UserAuthentication />
<h1>Companies</h1>

<div class="d-flex justify-end">
    <MudButton Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add"
               IconColor="Color.Secondary"
               Size="Size.Large"
               OnClick="OpenDialog">Add</MudButton>
</div>

<div class="my-8">
    @if (CompaniesList == null)
    {
        <MudText Class="my-4" Typo="Typo.h6">No data found.</MudText>
    }
    else if (companies.Count > 0)
    {
        <CompanyList Companies="@companies" />
    }
    else
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
    }
</div>



@code {
    private IJSObjectReference JsModule;
    List<CompanyDto> CompaniesList = new();
    List<CompanyDto> companies = new();

    CompanyCreationDto AddCompany = new();
 
    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.UserId == Guid.Empty)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            var Id = await JsModule.InvokeAsync<string>("getUserId");
            CurrentUser.UserId = new Guid(Id);
        }

        CompaniesList = await CompanyRepository.GetChildCompaniesAsync(CurrentUser.UserId);
        if (CompaniesList is not null)
        {
            companies = CompaniesList;
        }
        StateHasChanged();
    }

    private async Task OpenDialog()
    {
        var parameters = new DialogParameters();
        AddCompany = new CompanyCreationDto();
        parameters.Add("NewCompany", AddCompany);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };

        var dialog = DialogService.Show<AddCompanyDialog>("Add Company", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // add new customer to backend
            var customerCreation = new CompanyCreationDto
                {
                    Name = AddCompany.Name,
                    StreetAddress1 = AddCompany.StreetAddress1,
                    StreetAddress2 = AddCompany.StreetAddress2,
                    City = AddCompany.City,
                    State = AddCompany.State,
                    PostalCode = AddCompany.PostalCode,
                    ProfilePicUrl = AddCompany.ProfilePicUrl,
                    Email = AddCompany.Email,
                    PhonePrimary = AddCompany.PhonePrimary,
                    PhoneSecondary = AddCompany.PhoneSecondary,
                    ParentId = CurrentUser.UserId,
                };
            await CompanyRepository.CreateCompanyAsync(customerCreation);
        }
        companies = await CompanyRepository.GetChildCompaniesAsync(CurrentUser.UserId);
    }
}
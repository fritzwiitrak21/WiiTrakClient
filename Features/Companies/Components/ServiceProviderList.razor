@using WiiTrakClient.Features.SystemOwner.Components

@namespace WiiTrakClient.Features.Companies.Components

@inject IDialogService DialogService
@inject IServiceProviderHttpRepository ServiceProviderHttpRepository

   <MudTable Items="@ServiceProviders" Hover="true" SortLabel="Sort By">
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ServiceProviderDto, object>(x=>x.ServiceProviderName)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ServiceProviderDto, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ServiceProviderDto, object>(x=>x.PhonePrimary)">Phone</MudTableSortLabel></MudTh>        
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            @context.ServiceProviderName
        </MudTd>
        <MudTd DataLabel="Email">
            @context.Email
        </MudTd>
         <MudTd DataLabel="Phone">
            @context.PhonePrimary
        </MudTd>
     
        <MudTd DataLabel="Action">           
            <MudButton 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                OnClick="((e) => OpenDialog(context))">Update
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable> 


@code {
    [Parameter]
    public List<ServiceProviderDto>? ServiceProviders {get; set;} = null;
    private bool _enabled = true;
    public async Task OpenDialog(ServiceProviderDto serviceProvider) {

         // TODO Update for service provider 
 
       Console.WriteLine("service provider id: " + serviceProvider.Id);

        var parameters = new DialogParameters();
                parameters.Add("ServiceProvider", serviceProvider);   

         DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large }; 

         var dialog  = DialogService.Show<UpdateServiceProviderDialog>("Update Service Provider", parameters);
        var result = await dialog.Result; 

        if (!result.Cancelled) 
        {
            // save updated service provider to backend
            var serviceProviderUpdate = new ServiceProviderUpdateDto {
                ServiceProviderName = serviceProvider.ServiceProviderName,
                Email = serviceProvider.Email,
                PhonePrimary = serviceProvider.PhonePrimary,
                PhoneSecondary = serviceProvider.PhoneSecondary,
                CompanyId = serviceProvider.CompanyId
            };
           await ServiceProviderHttpRepository.UpdateServiceProviderAsync(serviceProvider.Id, serviceProviderUpdate);
        }  
    }
}
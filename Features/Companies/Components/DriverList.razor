@using WiiTrakClient.Features.SystemOwner.Components
@using WiiTrakClient.Cores

@namespace WiiTrakClient.Features.Companies.Components

@inject IDialogService DialogService

@inject ICompanyHttpRepository CompanyHttpRepository
@inject IDriverHttpRepository DriverHttpRepository

   <MudTable Items="@Drivers" Hover="true" SortLabel="Sort By">
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<DriverDto, object>(x=>x.FirstName)">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel  SortBy="new Func<DriverDto, object>(x=>x.LastName)">LastName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<DriverDto, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<DriverDto, object>(x=>x.Phone)">Phone</MudTableSortLabel></MudTh> 
        <MudTh><MudTableSortLabel SortBy="new Func<DriverDto, object>(x=>x.StreetAddress1)">Street Address 1</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<DriverDto, object>(x=>x.StreetAddress2)">Street Address 2</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<DriverDto, object>(x=>x.City)">City</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<DriverDto, object>(x=>x.State)">State</MudTableSortLabel></MudTh> 
        <MudTh><MudTableSortLabel SortBy="new Func<DriverDto, object>(x=>x.CountryCode)">Country Code</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<DriverDto, object>(x=>x.PostalCode)">Postal Code</MudTableSortLabel></MudTh> 
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FirstName">
            @context.FirstName
        </MudTd>
        <MudTd DataLabel="LastName">
            @context.LastName
        </MudTd>
        <MudTd DataLabel="Email">
            @context.Email
        </MudTd>
         <MudTd DataLabel="Phone">
            @context.Phone
        </MudTd>
        <MudTd DataLabel="Street Address 1">
            @context.StreetAddress1
        </MudTd>
        <MudTd DataLabel="Street Address 2">
            @context.StreetAddress2
        </MudTd>
        <MudTd DataLabel="City">
            @context.City
        </MudTd>
        <MudTd DataLabel="State">
            @context.State
        </MudTd>
        <MudTd DataLabel="Country Code">
            @context.CountryCode 
        </MudTd>
        <MudTd DataLabel="Postal Code">
            @context.PostalCode
        </MudTd>
        <MudTd DataLabel="Action">           
            <MudButton 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                OnClick="((e) => OpenDialog(context))">Update
            </MudButton>
        </MudTd> 
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
    </PagerContent>
</MudTable> 


@code {
    [Parameter]
    public List<DriverDto>? Drivers {get; set;} = null;
    private bool _enabled = true;
    public async Task OpenDialog(DriverDto driver) {
        driver.IsTerminated = !driver.IsActive;
        // TODO Update for technicians 
 
        Console.WriteLine("driver id: " + driver.Id);

        var parameters = new DialogParameters();
                parameters.Add("Driver", driver);   

         DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large }; 

         var dialog  = DialogService.Show<UpdateDriverDialog>("Update Driver", parameters);
        var result = await dialog.Result; 

        if (!result.Cancelled) 
        {
            // save updated driver to backend
            var driverUpdate = new DriverUpdateDto {
                FirstName = driver.FirstName,
                LastName = driver.LastName,
                Email = driver.Email,
                Phone = driver.Phone,
                StreetAddress1=driver.StreetAddress1,
                StreetAddress2=driver.StreetAddress2,
                City=driver.City,
                State=driver.State,
                CountryCode=driver.CountryCode,
                PostalCode=driver.PostalCode,
                CompanyId = driver.CompanyId,
                IsSuspended=driver.IsSuspended,
                IsActive=!driver.IsTerminated 
            };
           await DriverHttpRepository.UpdateDriverAsync(driver.Id, driverUpdate);
           Drivers = await DriverHttpRepository.GetDriversByCompanyIdAsync(CurrentUser.UserId);
        }  
    }
}
@namespace WiiTrakClient.Features.Companies.Components

@inject IDialogService DialogService

@inject ITechnicianHttpRepository TechnicianRepository

   <MudTable Items="@Technicians" Class="Pagingstyle" Hover="true" SortLabel="Sort By">
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<TechnicianDto, object>(x=>x.FirstName)">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel  SortBy="new Func<TechnicianDto, object>(x=>x.LastName)">LastName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TechnicianDto, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TechnicianDto, object>(x=>x.Phone)">Phone</MudTableSortLabel></MudTh>        
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="FirstName">
            @context.FirstName
        </MudTd>
        <MudTd DataLabel="LastName">
            @context.LastName
        </MudTd>
        <MudTd DataLabel="Email">
            @context.Email
        </MudTd>
         <MudTd DataLabel="Phone">
            @context.Phone
        </MudTd>
     
        <MudTd DataLabel="Action">           
            <MudButton 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                OnClick="((e) => OpenDialog(context))">Update
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
    </PagerContent>
</MudTable> 


@code {
    [Parameter]
    public List<TechnicianDto>? Technicians {get; set;} = null;
    private bool _enabled = true;
    public async Task OpenDialog(TechnicianDto technician) {

         // TODO Update for technicians 
 
        Console.WriteLine("technician id: " + technician.Id);

        var parameters = new DialogParameters();
                parameters.Add("Technician", technician);   

         DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large }; 

         var dialog  = DialogService.Show<UpdateTechnicianDialog>("Update Technician", parameters);
        var result = await dialog.Result; 

        if (!result.Cancelled) 
        {
            // save updated technician to backend
            var technicianUpdate = new TechnicianUpdateDto() {
                FirstName = technician.FirstName,
                LastName = technician.LastName,
                Email = technician.Email,
                Phone = technician.Phone,
                ProfilePic = technician.ProfilePic,
            };
           await TechnicianRepository.UpdateTechnicianAsync(technician.Id, technicianUpdate);
        }  
    }
}
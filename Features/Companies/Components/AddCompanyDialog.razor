@namespace WiiTrakClient.Features.Companies.Components
@using System.ComponentModel.DataAnnotations

<style>
    .validation-message {
    font-size:0;
    display:none;
    font-display:block;
    color: red;
}
.mud-input-helper-text.mud-input-error {
    font-size: 0;
}
.mud-input-helper-text {
    color: var(--mud-palette-text-secondary);
    margin: 0;
    font-size: 0;
}
</style> 

 <MudDialog>
    <DialogContent>              
        <div style="width: 400px;height:450px;overflow: auto;">
                <MudForm @ref=form Model="@NewCompany" @bind-IsValid="@success" @bind-Errors="@errors">  
                    <DataAnnotationsValidator />
                    <MudTextField T="string" class="my-6" @bind-Value="NewCompany.Name" Label="Company Name" Required="true" RequiredError=" " For="@(() => @NewCompany.Name)" Variant="Variant.Text"></MudTextField>  
                    <MudTextField T="string" class="my-6" @bind-Value="NewCompany.StreetAddress1" Label="Street Address 1" Required="true" RequiredError=" " For="@(() => @NewCompany.StreetAddress1)" Variant="Variant.Text"></MudTextField>  
                    <MudTextField T="string" class="my-6" @bind-Value="NewCompany.StreetAddress2" Label="Street Address 2" For="@(() => @NewCompany.StreetAddress2)" Variant="Variant.Text"></MudTextField>  
                    <MudTextField T="string" class="my-6" @bind-Value="NewCompany.City" Label="City" Required="true" RequiredError=" " For="@(() => @NewCompany.City)" Variant="Variant.Text"></MudTextField>  
                    <MudTextField T="string" class="my-6" @bind-Value="NewCompany.State" Label="State" Required="true" RequiredError=" " For="@(() => @NewCompany.State)" Variant="Variant.Text"></MudTextField>  
                    <MudTextField T="string" class="my-6" @bind-Value="NewCompany.PostalCode" Label="Zip Code" Required="true" RequiredError=" " For="@(() => @NewCompany.PostalCode)" Variant="Variant.Text"></MudTextField>  
                    <MudTextField T="string" class="my-6" @bind-Value="NewCompany.Email" Label="Email" Required="true" RequiredError=" " For="@(() => @NewCompany.Email)" Variant="Variant.Text"></MudTextField>
                    <MudTextField T="string" class="my-6" @bind-Value="NewCompany.PhonePrimary" Label="Phone Primary" Required="true" RequiredError=" " For="@(() => @NewCompany.PhonePrimary)"  Variant="Variant.Text"></MudTextField> 
                    <MudTextField T="string" class="my-6" @bind-Value="NewCompany.PhoneSecondary" Label="Phone Secondary" For="@(() => @NewCompany.PhoneSecondary)"  Variant="Variant.Text"></MudTextField>  
                    <MudCheckBox @bind-Checked="NewCompany.CannotHaveChildren" Label="Do Not Allow Sub Companies" Color="Color.Primary"></MudCheckBox>  
                    <div class="d-flex">
                        <MudButton OnClick="Cancel">Cancel</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="Submit" Class="ml-auto">Save</MudButton>
                    </div>
                </MudForm> 
        </div>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public CompanyCreationDto? NewCompany {get; set;}

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool success;
    string[] errors = { };
    MudForm form;

    protected override void OnParametersSet() {

    }
    //void CheckEmail()
    //{
    //        var Email = NewCompany.Email;
    //      var IsExists = await SystemOwnerHttpRepository.CheckEmailIdAsync(NewCompany.Email);
    //}
    void Submit() 
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();
    //public async Task CheckEmail()
    //{
    //    var Email = NewCompany.Email;
    //      var IsExists = await SystemOwnerHttpRepository.CheckEmailIdAsync(NewCompany.Email);
    //}
}
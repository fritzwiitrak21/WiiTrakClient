@using WiiTrakClient.Cores
@using WiiTrakClient.Features.Companies.Components
@using System.Linq
@using System.Collections.Generic;
@using WiiTrakClient.Cores;

@namespace WiiTrakClient.Features.Companies.Components

<MudTable Items=@driverstore   Hover="true" SortLabel="Sort By" Striped="true" Bordered="false" Loading="@_listIsLoading"
    LoadingProgressColor="Color.Primary">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel InitialDirection="@SortDirection.Ascending"
                SortBy="new Func<StoreDto, object>(x => x.StoreNumber)">Store Number
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
           Store Name
        </MudTh>
        <MudTh>
            Email
        </MudTh>
        <MudTh>
            Phone
        </MudTh>
        <MudTh>
            Street Address 1
        </MudTh>
        <MudTh>
            Street Address 2
        </MudTh>
        <MudTh>
            City
        </MudTh>
        <MudTh>
            State
        </MudTh>
        <MudTh>
            Postal Code
        </MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Store Number">@context.StoreNumber</MudTd>
        <MudTd DataLabel="Store Name">@context.StoreName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Phone">@context.PhonePrimary</MudTd>
        <MudTd DataLabel="Street Address 1">@context.StreetAddress1</MudTd>
        <MudTd DataLabel="Street Address 2">@context.StreetAddress2</MudTd>
        <MudTd DataLabel="City">@context.City</MudTd>
        <MudTd DataLabel="State">@context.State</MudTd>
        <MudTd DataLabel="Postal Code">@context.PostalCode</MudTd> 

        <MudTd DataLabel="">
            @if (!context.IsActive)
            {
                    <MudButton Variant="Variant.Filled" 
                    StartIcon="@Icons.Material.Filled.Send"
                    OnClick="((e) => Assign(context))"
                    Color="Color.Primary">Assign
                    </MudButton>
            }
            else
            {
                    <MudButton Variant="Variant.Filled" 
                    EndIcon="@Icons.Material.Filled.Send" 
                    OnClick="((e) => UnAssign(context))"
                    Color="Color.Default">UnAssign
                    </MudButton>
            } 
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
    </PagerContent>
</MudTable>

@code {
   [Parameter]
    public List<DriverStoreDetailsDto> driverstore { get; set; }

    public bool _listIsLoading = false;
    
    
    public DriverDto _selectedDriver = new();

    [Inject]
    public IDriverStoresHttpRepository DriverStoreRepository { get; set; }

   
    protected override async Task OnInitializedAsync()
    {

       
    }
    private async Task Assign(DriverStoreDetailsDto DriverStore)
    {
        DriverStore.IsActive = true;
        await DriverStoreRepository.UpdateDriverStoresAsync( Core.SelectedDriverId,DriverStore);
    }
    private async Task UnAssign(DriverStoreDetailsDto DriverStore)
    {
        DriverStore.IsActive = false;
        await DriverStoreRepository.UpdateDriverStoresAsync( Core.SelectedDriverId,DriverStore);
    }
}

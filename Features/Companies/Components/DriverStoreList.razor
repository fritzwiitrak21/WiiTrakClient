@using WiiTrakClient.Cores
@using WiiTrakClient.Features.Companies.Components
@using System.Linq
@using System.Collections.Generic;
@using WiiTrakClient.Cores;

@namespace WiiTrakClient.Features.Companies.Components

<MudTable Items=@driverstore Hover="true" SortLabel="Sort By" Striped="true" Bordered="false" Loading="@_listIsLoading"
          LoadingProgressColor="Color.Primary">
    <HeaderContent>

        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                               SortBy="new Func<DriverStoreDetailsDto, object>(x=>x.StoreName)">
                Store Name
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                               SortBy="new Func<DriverStoreDetailsDto, object>(x=>x.StoreNumber)">
                Store Number
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            Street Address 1
        </MudTh>
        <MudTh>
            Street Address 2
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<DriverStoreDetailsDto, object>(x=>x.City)">
                City
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<DriverStoreDetailsDto, object>(x=>x.State)">
                State
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<DriverStoreDetailsDto, object>(x=>x.PostalCode)">
                Postal Code
            </MudTableSortLabel>
        </MudTh>

        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Store Name">@context.StoreName</MudTd>
        <MudTd DataLabel="Store Number">@context.StoreNumber</MudTd>
        <MudTd DataLabel="Street Address 1">@context.StreetAddress1</MudTd>
        <MudTd DataLabel="Street Address 2">@context.StreetAddress2</MudTd>
        <MudTd DataLabel="City">@context.City</MudTd>
        <MudTd DataLabel="State">@context.State</MudTd>
        <MudTd DataLabel="Postal Code">@context.PostalCode</MudTd>

        <MudTd DataLabel="">
            @if (!context.DriverStoresIsActive)
            {
                if (context.AssignedDriver.Length == 0)
                {
                    <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Send"
                       OnClick="((e) => Assign(context))"
                       Color="Color.Primary">
                        Assign
                    </MudButton>
                }
                else
                {
                    <MudText>Already assigned to<br />@context.AssignedDriver</MudText>
                }
            }
            else
            {
                <MudButton Variant="Variant.Filled"
                       EndIcon="@Icons.Material.Filled.Send"
                       OnClick="((e) => UnAssign(context))"
                       Color="Color.Default">
                    UnAssign
                </MudButton>
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public List<DriverStoreDetailsDto>? driverstore { get; set; } = null;

    public bool _listIsLoading = false;


    public DriverDto _selectedDriver = new();

    [Inject]
    public IDriverStoresHttpRepository DriverStoreRepository { get; set; }

    private async Task Assign(DriverStoreDetailsDto DriverStore)
    {
        await AssignUnAssign(DriverStore);
    }
    private async Task UnAssign(DriverStoreDetailsDto DriverStore)
    {
        await AssignUnAssign(DriverStore, false);
    }
    private async Task AssignUnAssign(DriverStoreDetailsDto DriverStore, bool Assign = true)
    {
        DriverStore.DriverStoresIsActive = Assign;
        DriverStore.DriverId = Core.SelectedDriverId;
        DriverStore.AssignedBy = CurrentUser.UserId;
        await DriverStoreRepository.UpdateDriverStoresAsync(DriverStore);
        StateHasChanged();
    }
}

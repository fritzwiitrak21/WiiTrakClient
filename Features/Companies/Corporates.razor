@page "/company-corporates"

@using WiiTrakClient.Features.Companies.Components
@using WiiTrakClient.Cores
@inject IJSRuntime JsRuntime
@inject ICorporateHttpRepository CorporateRepository
@inject IDialogService DialogService


<UserAuthentication />
<h3>Corporates</h3>

<div class="d-flex justify-end">
    <MudButton Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add"
               IconColor="Color.Secondary"
               Size="Size.Large"
               OnClick="OpenDialog">Add</MudButton>
</div>

<div class="my-8">
    @if (CorporateList == null)
    {
        <MudText Class="my-4" Typo="Typo.h6">No data found.</MudText>
    }
    else if (corporates.Count > 0)
    {
        <CorporatesList Corporate="@corporates" />
    }
    else
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
    }
</div>



@code {

    private IJSObjectReference JsModule;
    List<CorporateDto> CorporateList = new();
    List<CorporateDto> corporates = new();

    CorporateDto AddCorporate = new();
 
    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.UserId == Guid.Empty)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            var Id = await JsModule.InvokeAsync<string>("getUserId");
            CurrentUser.UserId = new Guid(Id);
        }

        CorporateList = await CorporateRepository.GetCorporatesByCompanyId(CurrentUser.UserId);
        if (CorporateList is not null)
        {
            corporates = CorporateList;
        }
        StateHasChanged();
    }

    private async Task OpenDialog()
    {
        var parameters = new DialogParameters();
        AddCorporate = new CorporateDto();
        parameters.Add("NewCorporate", AddCorporate);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };

        var dialog = DialogService.Show<AddCorporateDialog>("Add Corporate", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            // add new customer to backend
            var customerCreation = new CorporateDto
                {
                    Name = AddCorporate.Name,
                    StreetAddress1 = AddCorporate.StreetAddress1,
                    StreetAddress2 = AddCorporate.StreetAddress2,
                    City = AddCorporate.City,
                    State = AddCorporate.State,
                    PostalCode = AddCorporate.PostalCode,
                    ProfilePicUrl = AddCorporate.ProfilePicUrl,
                    Email = AddCorporate.Email,
                    PhonePrimary = AddCorporate.PhonePrimary,
                    PhoneSecondary = AddCorporate.PhoneSecondary,
                    CompanyId = CurrentUser.UserId,
                };
            await CorporateRepository.CreateCorporateAsync(CurrentUser.UserId,CurrentUser.UserRoleId,customerCreation);

        }
        corporates = await CorporateRepository.GetCorporatesByCompanyId(CurrentUser.UserId);
    }

}

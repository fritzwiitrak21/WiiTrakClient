@page "/service-providers"

@using WiiTrakClient.Features.Companies.Components

@inject IJSRuntime JsRuntime
@inject ICompanyHttpRepository CompanyRepository
@inject IServiceProviderHttpRepository ServiceProviderRepository
@inject IDialogService DialogService

<UserAuthentication/>
<h1>Service Providers</h1>

<div class="d-flex justify-end">
    <MudButton Variant="Variant.Filled" 
        StartIcon="@Icons.Material.Filled.Add" 
        IconColor="Color.Secondary" 
        Size="Size.Large"
        OnClick="OpenDialog">Add</MudButton>
</div>

<div class="my-8">
    <ServiceProviderList ServiceProviders="@_serviceProviders" />
</div>



@code {
    List<ServiceProviderDto> _serviceProviders = new ();
    
    ServiceProviderCreationDto _newServiceProvider = new();

    protected override async Task OnInitializedAsync()
    {
        _serviceProviders = await ServiceProviderRepository.GetAllServiceProvidersAsync();     
    }  

    private async Task OpenDialog() 
    {
        var parameters = new DialogParameters(); 
        parameters.Add("NewServiceProvider", _newServiceProvider);

         DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large }; 

         var dialog  = DialogService.Show<AddServiceProviderDialog>("Add Service Provider", parameters);
        var result = await dialog.Result; 

        if (!result.Cancelled) 
        {
            // add new service provider to backend
            var serviceProviderCreation = new ServiceProviderCreationDto() {
                ServiceProviderName = _newServiceProvider.ServiceProviderName,
                Email = _newServiceProvider.Email,
                PhonePrimary = _newServiceProvider.PhonePrimary,
                PhoneSecondary = _newServiceProvider.PhoneSecondary,
                CompanyId = _newServiceProvider.CompanyId
            };
            await ServiceProviderRepository.CreateServiceProviderAsync(serviceProviderCreation);
        }  
    } 
}
@namespace WiiTrakClient.Features.Corporates.Components
@using System.ComponentModel.DataAnnotations
@using WiiTrakClient.Cores

<style>
    .validation-message {
        font-size: 0;
        display: none;
        font-display: block;
        color: red;
    }

    .mud-input-helper-text.mud-input-error {
        font-size: 0;
    }

    .mud-input-helper-text {
        color: var(--mud-palette-text-secondary);
        margin: 0;
        font-size: 0;
    }

    .countycode::placeholder {
        color: red;
        opacity: 1;
    }
</style>

<MudDialog Class="dialogstyle">
    <DialogContent>
        <div style="width: 400px;height:550px;">
            <MudForm Model="@NewStore" @ref=form @bind-IsValid="@success" @bind-Errors="@errors">
                <MudItem>
                    <MudSelect T="CompanyDto" Label="Select Company" Required=true RequiredError=" "
                               ValueChanged="(value) => HandleCompanySelected(value)"
                               AnchorOrigin="Origin.BottomCenter">
                        @foreach (var company in companies)
                        {
                            <MudSelectItem T="CompanyDto" Value="@company">@company.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudTextField class="my-6" @bind-Value="NewStore.StoreName" Label="Store Name" Required="true" RequiredError=" " For="@(() => @NewStore.StoreName)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewStore.StoreNumber" Label="Store Number" Required="true" RequiredError=" " For="@(() => @NewStore.StoreNumber)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewStore.Email" Label="Email" Required="true" RequiredError=" " For="@(() => @NewStore.Email)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewStore.PhonePrimary" Label="Phone Primary" Required="true" RequiredError=" " For="@(() => @NewStore.PhonePrimary)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewStore.PhoneSecondary" Label="Phone Secondary" For="@(() => @NewStore.PhoneSecondary)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewStore.StreetAddress1" Label="Street Address 1" Required="true" RequiredError=" " For="@(() => @NewStore.StreetAddress1)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewStore.StreetAddress2" Label="Street Address 2" For="@(() => @NewStore.StreetAddress2)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewStore.City" Label="City" Required="true" RequiredError=" " For="@(() => @NewStore.City)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewStore.State" Label="State" Required="true" RequiredError=" " For="@(() => @NewStore.State)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewStore.PostalCode" Label="Zip Code" Required="true" RequiredError=" " For="@(() => @NewStore.PostalCode)" Variant="Variant.Text"></MudTextField>
               <div Class="Mudsearchselect">
                    @if (SelectedCounty != "")
                    {
                        <label id="targetlabel">County Code*</label>
                    }
                    <input type="text" list="textsearch" Class="inputselect my-3" placeholder="County Code*" value="@SelectedCounty" @onkeyup="OnClick" @onchange="eventArgs => { OnSelect(eventArgs.Value); }" />

                    <datalist id="textsearch">
                        @foreach (var county in County)
                        {
                            <option value="@county" />
                        }
                    </datalist>
                </div>
                <MudItem Class="my-3">
                    <MudSelect T="String" Value="@SelectedService" ValueChanged="(value) => HandleServiceFrequency(value)" Label="Select Service Frequency" Required=true RequiredError=" "
                               AnchorOrigin="Origin.BottomCenter">

                        <MudSelectItem T="String" Value=@("1 time a week")>1 time a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("2 times a week")>2 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("3 times a week")>3 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("4 times a week")>4 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("5 times a week")>5 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("6 times a week")>6 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("7 times a week")>7 times a week</MudSelectItem>
                    </MudSelect>

                </MudItem>
                <MudDatePicker Class="my-6" Label="" Editable="false" MinDate="MinDate" @bind-Date="NewStore.StartDate" Placeholder="Select Start Date" Required=true RequiredError=" " For="@(() => @NewStore.StartDate)" />

                <MudCheckBox @bind-Checked="NewStore.IsSignatureRequired" Label="Signature Reqired For Deliveries" Color="Color.Primary"></MudCheckBox>
                <div class="d-flex SubmitGrp">
                    <MudButton OnClick="Cancel">Cancel</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="ml-auto">Save</MudButton>
                </div>
            </MudForm>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public StoreCreationDto? NewStore { get; set; }
    public List<CompanyDto> companies { get; set; } = new();
    public List<CountyCodeDTO> CountyCodeList { get; set; } = new();
    public CompanyDto SelectedCompany = new();
    public CountyCodeDTO SelectedCountyCode = new();
    [Inject]
    public ICompanyHttpRepository CompanyRepository { get; set; }
    [Inject]
    public ICountyCodeHttpRepository CountyCodeRepository { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool success;
    string[] errors = { };
    string[] County;
    MudForm form;
    [Inject] IJSRuntime JsRuntime { get; set; }
    private IJSObjectReference JsModule;
    public string SelectedService = "";
    DateTime? MinDate { get; set; } = DateTime.Today;
    DateTime SelectedDate { get; set; } = DateTime.Today;
    public string SelectedCounty = "";
    protected override async Task OnInitializedAsync()
    {
        NewStore.StartDate = SelectedDate;
        companies = await CompanyRepository.GetCompaniesByCorporateIdAsync(CurrentUser.UserId);
        if (companies.Count > 0)
        {
            SelectedCompany = companies[0];
        }
        CountyCodeList = await CountyCodeRepository.GetCountyListAsync();
        if (CountyCodeList.Count > 0)
        {
            SelectedCountyCode = CountyCodeList[0];
            NewStore.CountyCode = SelectedCountyCode.CountyCode;
            try
            {
                string[] C = new string[CountyCodeList.Count];
                for (int i = 0; i < CountyCodeList.Count; i++)
                {
                    SelectedCountyCode = CountyCodeList[i];
                    if (!(C.Contains(SelectedCountyCode.CountyCode)))
                    {
                        C[i] = SelectedCountyCode.CountyCode;
                    }
                }
                County = (string[])C.Clone();

            }
            catch (Exception ex)
            {

            }
        }
    }
    protected override void OnParametersSet()
    {
        SelectedService = "1 time a week";
        NewStore.ServiceFrequency = "1 time a week";
    }
    public async Task HandleServiceFrequency(string value)
    {
        NewStore.ServiceFrequency = value;
        SelectedService = value;
    }
    private async Task OnClick()
    {
        if (JsModule is null)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
        }

        var inputtext = await JsModule.InvokeAsync<string>("getTextBoxValue");
        if (inputtext == "")
        {
            await JsModule.InvokeVoidAsync("addValidationCountycodeClass");
            StateHasChanged();
        }
        else
        {
            await JsModule.InvokeVoidAsync("removeValidationCountycodeClass");
            StateHasChanged();
        }
    }
    private async Task OnSelect(object e)
    {
        try
        {
            if (JsModule is null)
            {
                JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            }
            if (County.Contains(e))
            {

                NewStore.CountyCode = e.ToString();
                SelectedCounty = e.ToString();
                if (success)
                {
                    success = true; // Enable the Save button when other fields are valid
                }
                else
                {
                    success = false;// Disable the Save button when other fields are valid
                }
            }
            else
            {
                SelectedCounty = e.ToString();
                success = false;
                await JsModule.InvokeVoidAsync("addValidationCountycodeClass");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
        }
    }
    void Submit()
    {
        if(!success)
        {
            form.Validate();
        }
        else
        {
            MudDialog.Close(DialogResult.Ok(true)); 
        }
    }
    void Cancel() => MudDialog.Cancel();
    private async Task HandleCompanySelected(CompanyDto Company)
    {
        NewStore.CompanyId = Company.Id;
    }
}
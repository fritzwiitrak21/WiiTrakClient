@namespace WiiTrakClient.Features.Corporates.Components
@using System.ComponentModel.DataAnnotations
@using WiiTrakClient.Cores

<style>
    .validation-message {
    font-size:0;
    display:none;
    font-display:block;
    color: red;
    }
    .mud-input-helper-text.mud-input-error {
    font-size: 0;
    }
    .mud-input-helper-text {
    color: var(--mud-palette-text-secondary);
    margin: 0;
    font-size: 0;
    
    }
</style>
 
<MudDialog Class="dialogstyle">
    <DialogContent>              
        <div style="width: 400px;height:550px;">
            <MudForm Model="@NewStore" @ref=form @bind-IsValid="@success" @bind-Errors="@errors"> 
                <MudItem>
                    <MudSelect T="CompanyDto" Label="Select Company" Required=true RequiredError=" "
                    ValueChanged="(value) => HandleCompanySelected(value)"
                        AnchorOrigin="Origin.BottomCenter">
                        @foreach (var company in companies)
                        {
                            <MudSelectItem T="CompanyDto" Value="@company">@company.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudTextField class="my-6" @bind-Value="NewStore.StoreName" Label="Store Name" Required="true" RequiredError=" " For="@(() => @NewStore.StoreName)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewStore.StoreNumber" Label="Store Number" Required="true" RequiredError=" " For="@(() => @NewStore.StoreNumber)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewStore.Email" Label="Email" Required="true" RequiredError=" " For="@(() => @NewStore.Email)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewStore.PhonePrimary" Label="Phone Primary" Required="true" RequiredError=" " For="@(() => @NewStore.PhonePrimary)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewStore.PhoneSecondary" Label="Phone Secondary"  For="@(() => @NewStore.PhoneSecondary)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewStore.StreetAddress1" Label="Street Address 1" Required="true" RequiredError=" " For="@(() => @NewStore.StreetAddress1)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewStore.StreetAddress2" Label="Street Address 2"  For="@(() => @NewStore.StreetAddress2)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewStore.City" Label="City" Required="true" RequiredError=" " For="@(() => @NewStore.City)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewStore.State" Label="State" Required="true" RequiredError=" " For="@(() => @NewStore.State)" Variant="Variant.Text"></MudTextField>  
                <MudTextField class="my-6" @bind-Value="NewStore.PostalCode" Label="Zip Code" Required="true" RequiredError=" " For="@(() => @NewStore.PostalCode)" Variant="Variant.Text"></MudTextField>
                @*<MudTextField class="my-6" @bind-Value="NewStore.Latitude" Label="Latitude" Required="true" RequiredError=" " For="@(() => @NewStore.Latitude)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="NewStore.Longitude" Label="Longitude" Required="true" RequiredError=" " For="@(() => @NewStore.Longitude)" Variant="Variant.Text"></MudTextField>*@
                @*<MudTextField class="my-6" @bind-Value="NewStore.CountryCode" Label="Country Code" Required="true" RequiredError=" " For="@(() => @NewStore.CountryCode)" Variant="Variant.Text"></MudTextField>*@
               
                 <MudItem Class="my-6">
                    <MudAutocomplete T="string" Label="County Code" ValueChanged="(value) => HandleCountyCode(value)" SearchFunc="@Search1" Required=true RequiredError=" "
                                     ResetValueOnEmptyText="true"
                                     CoerceText="true" CoerceValue="true" />
                </MudItem>
                <MudItem Class="my-6">
                    <MudSelect T="String" ValueChanged="(value) => HandleServiceFrequency(value)" Label="Select Service Frequency" Required=true RequiredError=" "
                               AnchorOrigin="Origin.BottomCenter">

                        <MudSelectItem T="String" Value=@("1 time a week")>1 time a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("2 times a week")>2 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("3 times a week")>3 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("4 times a week")>4 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("5 times a week")>5 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("6 times a week")>6 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("7 times a week")>7 times a week</MudSelectItem>
                    </MudSelect>

                </MudItem>
                <MudDatePicker Class="my-6" Label="" Editable="false" MinDate="MinDate" @bind-Date="NewStore.StartDate" Placeholder="Select Start Date" Required=true RequiredError=" "  For="@(() => @NewStore.StartDate)" />
               
                <MudCheckBox @bind-Checked="NewStore.IsSignatureRequired" Label="Signature Reqired For Deliveries" Color="Color.Primary"></MudCheckBox> 
                <div class="d-flex SubmitGrp">
                    <MudButton OnClick="Cancel">Cancel</MudButton>
@*                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
*@                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="Submit" Class="ml-auto">Save</MudButton>
                </div>
            </MudForm>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public StoreCreationDto? NewStore {get; set;}
    public List<CompanyDto> companies { get; set; } = new();
    public List<CountyCodeDTO> CountyCodeList { get; set; } = new();
    public CompanyDto _selectedCompany = new();
    public CountyCodeDTO _selectedCountyCode = new();
    [Inject]
    public ICompanyHttpRepository CompanyRepository { get; set; }
    [Inject]
    public ICountyCodeHttpRepository CountyCodeRepository { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool success;
    string[] errors = { };
    string[] County;
    MudForm form;
     DateTime? MinDate { get; set; } = DateTime.Today;
    DateTime SelectedDate { get; set; } = DateTime.Today;
    protected override async Task OnInitializedAsync()
    { 
        NewStore.StartDate = SelectedDate;
        companies = await CompanyRepository.GetCompaniesByCorporateIdAsync(CurrentUser.UserId);
        if (companies.Count > 0)
        {
            _selectedCompany = companies[0];
        }
        CountyCodeList = await CountyCodeRepository.GetCountyListAsync();
        if (CountyCodeList.Count > 0)
        {
            _selectedCountyCode = CountyCodeList[0];
            NewStore.CountyCode = _selectedCountyCode.CountyCode;
            try
            {
                string[] C = new string[CountyCodeList.Count];
                for (int i = 0; i < CountyCodeList.Count; i++)
                {
                    _selectedCountyCode = CountyCodeList[i];
                    C[i]=_selectedCountyCode.CountyCode;
                }
                County = (string[]) C.Clone();

            }
            catch(Exception ex)
            {
                
            }
        }
    } 
    protected override void OnParametersSet() {
            
    }
     public async Task HandleServiceFrequency(string value)
    {
        NewStore.ServiceFrequency = value;
    }
    public async Task HandleCountyCode(string value)
    {
        NewStore.CountyCode = value;
    }
     private async Task<IEnumerable<string>> Search1(string value)
    {
         if (string.IsNullOrEmpty(value))
            return County;
        return County.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    void Submit() 
    { 
        MudDialog.Close(DialogResult.Ok(true)); 
    }
    void Cancel() => MudDialog.Cancel();
    private async Task HandleCompanySelected(CompanyDto Company)
    {
        NewStore.CompanyId = Company.Id;
    }
}
@page "/driver-stores"

@using Features.Drivers.Components
@using WiiTrakClient.Cores

@inject IJSRuntime JsRuntime
@inject IStoreHttpRepository StoreRepository
@inject IDialogService DialogService
@using WiiTrakClient.Shared;
@using WiiTrakClient.Shared.Components;

<UserAuthentication />
<br />
<h3>Stores Assigned to @CurrentUser.UserName</h3>

<div class="my-8">
    @if (driverstorelist == null)
    {
        <MudText Class="my-4" Typo="Typo.h6">No data found.</MudText>
    }
    else if (driverstore.Count > 0)
    {
        <MudTable Items="@driverstore" Class="Pagingstyle" Hover="true" SortLabel="Sort By">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                                   SortBy="new Func<StoreDto, object>(x=>x.StoreName)">
                        Store Name
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                                   SortBy="new Func<StoreDto, object>(x=>x.StoreNumber)">
                        Store Number
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>Street Address</MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.City)">
                        City
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.State)">
                        State
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.PostalCode)">
                        Posta lCode
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>Service Frequency</MudTh>
                <MudTh>Phone</MudTh>
                <MudTh>Map</MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Store Name">
                    @context.StoreName
                </MudTd>
                <MudTd DataLabel="Store Number">
                    @context.StoreNumber
                </MudTd>
                <MudTd DataLabel="Street Address 1">
                    @context.StreetAddress1, @context.StreetAddress2
                </MudTd>
                <MudTd DataLabel="City">
                    @context.City
                </MudTd>
                <MudTd DataLabel="State">
                    @context.State
                </MudTd> 
                <MudTd DataLabel="Postal Code">
                    @context.PostalCode
                </MudTd>
                <MudTd DataLabel="Service Level">
                    @context.ServiceFrequency
                </MudTd>
                <MudTd DataLabel="Phone">
                    @context.PhonePrimary
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Outlined.Map"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               OnClick="() => DisplayMaps(context)"
                               Class="Datebutton" />

                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
    }

</div>


@code {

    List<StoreDto> driverstore = new();
    List<StoreDto> driverstorelist = new();


    private IJSObjectReference JsModule;
    public string CurrentCoord { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            await JsModule.InvokeVoidAsync("getCoord", false);
            CurrentCoord = await JsModule.InvokeAsync<string>("getCoordinates");
            await JsModule.InvokeVoidAsync("ClearCoord");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.UserId == Guid.Empty)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            var Id = await JsModule.InvokeAsync<string>("getUserId");
            CurrentUser.UserId = new Guid(Id)
    ;
            CurrentUser.UserName = await JsModule.InvokeAsync<string>("getUserName");

        }
        driverstorelist = await StoreRepository.GetStoresByDriverId(CurrentUser.UserId);

        if (driverstorelist is not null)
        {
            driverstore = driverstorelist.Where(x => x.IsActive == true && x.DriverStoresIsActive == true).ToList();
        }
        StateHasChanged();

    }

    private async Task DisplayMaps(StoreDto store)
    {
        try
        {
            if (string.IsNullOrEmpty(CurrentCoord))
            {
                if (JsModule is null)
                {
                    JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
                }
                await JsModule.InvokeVoidAsync("getCoord", false);
                CurrentCoord = await JsModule.InvokeAsync<string>("getCoordinates");
                await JsModule.InvokeVoidAsync("ClearCoord");
            }

            double Driverlatitude, Driverlongitude;
            if (!string.IsNullOrEmpty(CurrentCoord))
            {
                Driverlatitude = Core.ToDouble(CurrentCoord.Split("##")[0]);
                Driverlongitude = Core.ToDouble(CurrentCoord.Split("##")[1]);
            }
            else
            {
                await JsModule.InvokeVoidAsync("getCoord", true);
                CurrentCoord = await JsModule.InvokeAsync<string>("getCoordinates");
                await JsModule.InvokeVoidAsync("ClearCoord");
                Driverlatitude = Core.ToDouble(CurrentCoord.Split("##")[0]);
                Driverlongitude = Core.ToDouble(CurrentCoord.Split("##")[1]);
            }

            var address = string.Concat(store.StreetAddress1, store.StreetAddress2.Length > 0 ? store.StreetAddress2 + "," : "", store.City, ",", store.State, ",", store.PostalCode);
            var parameters = new DialogParameters();
            parameters.Add("Address", address);
            parameters.Add("StoreLatitude", store.Latitude);
            parameters.Add("StoreLongitude", store.Longitude);
            parameters.Add("DriverLatitude", Driverlatitude);
            parameters.Add("DriverLongitude", Driverlongitude);

            DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };

            var dialog = DialogService.Show<DisplayMap>("Map to " + store.StoreName + " - " + store.StoreNumber, parameters);
            var result = await dialog.Result;
            await JsModule.InvokeVoidAsync("ClearCoord");
        }
        catch (Exception ex)
        {
            // excepion
        }
    }
}

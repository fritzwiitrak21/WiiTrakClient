@page "/driver-carts"

@using WiiTrakClient.Features.Drivers.Components

@inject IJSRuntime JsRuntime
@inject ICartHttpRepository CartRepository
@inject IDriverHttpRepository DriverRepository

<MudGrid class="my-8">
    <MudItem xs="12" sm="6" md="4">
        <MudSelect T="DriverDto" 
            Label="Select Driver" 
            ValueChanged="(value) => HandleDriverSelected(value)" 
            AnchorOrigin="Origin.BottomCenter">
                @foreach (var driver in _drivers)
                {
                    <MudSelectItem T="DriverDto" Value="@driver">@driver.FirstName @driver.LastName</MudSelectItem>
                }                
        </MudSelect>
    </MudItem>
</MudGrid>


<h1>Carts</h1>

<MudText class="my-8" Typo="Typo.h5">Carts out: @cartsOutNumber</MudText>


<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
    <MudIconButton Icon="@Icons.Material.Filled.Map" OnClick="ShowMapView"></MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.List" OnClick="ShowListView"></MudIconButton>
    @* <MudIconButton Icon="@Icons.Material.Filled.GridView" OnClick="ShowGridView"></MudIconButton> *@
</MudButtonGroup>

<div class="mt-8">
    @switch (_view)
    {
        case ViewOption.Map: 
                <CartsMap Carts=@_carts></CartsMap>               
            break;
        case ViewOption.List:             
                <CartsList Carts=@_carts></CartsList>                      
            break;
        case ViewOption.Grid:           
                <CartsGrid Carts=@_carts></CartsGrid>                   
            break;
        default:           
                <CartsMap Carts=@_carts></CartsMap>         
            break;
    } 
</div>


@code {
    DriverDto _selectedDriver = new ();
    List<DriverDto> _drivers = new ();
    List<CartDto> _carts = new ();
    private enum ViewOption {
        Map,
        List,
        Grid
    }

    ViewOption _view = ViewOption.Map;

    string cartsOutNumber = "0";

    protected override async Task OnInitializedAsync()
    {
        _drivers = await DriverRepository.GetAllDriversAsync();
        await GetCartsByDriverId(_drivers[0].Id);
        _selectedDriver = _drivers[0];
    }

    private async Task HandleDriverSelected(DriverDto driver) 
    {
        System.Console.WriteLine(driver.Id);
        await GetCartsByDriverId(driver.Id);
        _selectedDriver = driver;
    }

    private async Task GetCartsByDriverId(Guid id) 
    {
        _carts = await CartRepository.GetCartsByDriverIdAsync(id);
        Console.WriteLine(_carts.Count());        
        cartsOutNumber = _carts is null ? "0" : _carts.Count().ToString();
    }

    private void ShowMapView()
    {
        Console.WriteLine("map view");
        _view = ViewOption.Map;
    }

    private void ShowListView()
    {
        Console.WriteLine("list view");
        _view = ViewOption.List;
    }

    private void ShowGridView()
    {
        Console.WriteLine("grid view");
        _view = ViewOption.Grid;
    }
}
@namespace WiiTrakClient.Features.Drivers.Components
@using WiiTrakClient.Shared.Components




<MudDialog>
    <DialogContent>
        <div style="width: 400px;height:450px;overflow: auto;">
            <MudForm Model="@NewDeliveryTicket">
                <DataAnnotationsValidator />


      @*  <MudAutocomplete T="StoreDto" Label="Store Name" HelperText="Select a Store"  
        ResetValueOnEmptyText="true"  SearchFunc="@Search1"  @bind-Value="selectedStore"
        CoerceText="true"/>*@

                <MudSelect Class="my-6" T="StoreDto" Label="Store" AnchorOrigin="Origin.BottomCenter"
                        HelperText="Select a Store" @bind-Value="@_selectedStore" Required="true" 
                        AdornmentColor="Color.Primary">
                       
                       

                    @foreach (var store in Stores)
                    {
                        <MudSelectItem T="StoreDto" Value="@store">@store.StoreName - @store.StoreNumber</MudSelectItem>
                    }
                    </MudSelect>


                @{
                    //UpdateNumberOfCarts();
                    UpdateStoreAndServiceProviderIds();
                }

                @*<MudText Class="my-4" Typo="Typo.h5">No of available carts to pickup: @NoOfCartsToPickUp</MudText>*@
                <MudTextField @bind-Value="@NewDeliveryTicket.NumberOfCarts" Label="No of Carts" For="@(() => @NewDeliveryTicket.NumberOfCarts)" Variant="Variant.Text"></MudTextField>
@*                    <ValidationMessage For="@(() => @NewDeliveryTicket.NumberOfCarts)" />
*@                <PicUpload OnPicUploadStart="@PicUploadStart" OnPicUploadComplete="@PicUploadComplete" />
@*                    <ValidationMessage For="@(() => @NewDeliveryTicket.PicUrl)" />
                        @*<CaptureImage OnPicUploadStart="@PicUploadStart" OnPicUploadComplete="@PicUploadComplete"/>
                        <ValidationMessage For="@(() => @NewDeliveryTicket.PicUrl)" />*@
                @if (!string.IsNullOrWhiteSpace(_fileUrl))
                {
                  <div class="d-flex justify-start mt-6 popupitemimage">
                      <img src="@_fileUrl" width="300" height="300" />
                  </div>
                }

            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                OnClick="Submit" 
                Disabled="_disableSaveButton">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public DeliveryTicketCreationDto? NewDeliveryTicket { get; set; }

    [Parameter]
    public DriverDto? Driver { get; set; }

    [Parameter]
    public List<CartDto>? Carts { get; set; } = new();

    [Parameter]
    public List<StoreDto>? Stores { get; set; } = new();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    public List<StoreDto>? TempStores { get; set; } = new();
    StoreDto _selectedStore = new();
    StoreDto selectedStore = new();

    private string _fileUrl = "";
    private int NoOfCartsToPickUp = 0;
    private string StoreName = "";

    bool _disableSaveButton = true;



    protected override void OnParametersSet()
    {
        if (Stores != null && Stores.Count() >= 1)
        {
            _selectedStore = Stores[0];
            NewDeliveryTicket.StoreId = _selectedStore.Id;
        }

        NewDeliveryTicket.DriverId = Driver.Id;
    }

    private async Task<IEnumerable<StoreDto>> Search1(string value)
    {



        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return Stores;

        return Stores.Where(x => x.StoreName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void UpdateNumberOfCarts()
    {
       NoOfCartsToPickUp = Carts.Count(x => x.StoreId == _selectedStore.Id && x.Status == CartStatus.PickedUp);  
    }

    private void UpdateStoreAndServiceProviderIds()
    {
        NewDeliveryTicket.StoreId = _selectedStore.Id;
        var store = Stores.First(x => x.Id == _selectedStore.Id);
        NewDeliveryTicket.ServiceProviderId = store.ServiceProviderId;
    }

    private void PicUploadStart()
    {
        _disableSaveButton = true;
    }

    private void PicUploadComplete(string url)
    {
        _fileUrl = url;
        _disableSaveButton = false;
        NewDeliveryTicket.PicUrl = _fileUrl;
    }

    private void StoreFilter()
    {

        if (StoreName != "")
        {
            TempStores = new();
            foreach (var item in Stores)
            {
                if (item.StoreName.ToLower().Contains(StoreName.ToLower().Trim()))
                {
                    TempStores.Add(item);
                }
            }


            //TempStores = Stores.Where(x => x.StoreName.ToLower().Contains(StoreName.ToLower().Trim()));


        }
        else
        {
            TempStores = new();
            TempStores = Stores;
        }
    }

    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}
@namespace WiiTrakClient.Features.Drivers.Components
@using System.ComponentModel.DataAnnotations
@using WiiTrakClient.Shared.Components

<style>
    .validation-message {
        font-size: 0;
        display: none;
        font-display: block;
        color: red;
    }

    .mud-input-helper-text.mud-input-error {
        font-size: 0;
    }

    .mud-input-helper-text {
        color: var(--mud-palette-text-secondary);
        margin: 0;
        font-size: 0;
    }
    
</style>

<MudDialog>
    <DialogContent>
        <div style="width: 400px;height:450px;overflow: auto;">
            <MudForm Model="@NewDeliveryTicket" @ref=form @bind-IsValid="@success" @bind-Errors="@errors">
                <DataAnnotationsValidator />
                <div Class="Mudsearchselect mt-6">
                <label id="targetlabel">Store*</label>
                <input type="text" list="textsearch" Class="inputselect"  @onkeyup="OnClick"  @onchange="eventArgs => { OnSelect(eventArgs.Value); }" />
               
                <datalist id="textsearch">
                    @foreach (var store in Stores)
                    {
                        <option id="@store.Id" data-value="@store.Id" value="@store.StoreName - @store.StoreNumber" />
                    }
                </datalist>
                </div>
               

               @* <MudSelect Class="my-6" T="StoreDto" Label="Store" AnchorOrigin="Origin.BottomCenter"
                           HelperText="Select a Store" @bind-Value="@_selectedStore" Required="true"
                           AdornmentColor="Color.Primary">



                    @foreach (var store in Stores)
                    {
                        <MudSelectItem T="StoreDto" Value="@store">@store.StoreName - @store.StoreNumber</MudSelectItem>
                    }
                </MudSelect>
*@

                @{
                    //UpdateNumberOfCarts();
                    UpdateStoreAndServiceProviderIds();
                }

                @*<MudText Class="my-4" Typo="Typo.h5">No of available carts to pickup: @NoOfCartsToPickUp</MudText>*@
                <MudTextField @bind-Value="@NewDeliveryTicket.NumberOfCarts" Label="No of Carts" Required="true" RequiredError=" "  For="@(() => @NewDeliveryTicket.NumberOfCarts)" Variant="Variant.Text"></MudTextField>
                
                @*<ValidationMessage For="@(() => @NewDeliveryTicket.NumberOfCarts)" />*@
                <PicUpload OnPicUploadStart="@PicUploadStart" OnPicUploadComplete="@PicUploadComplete" />
                @*                    <ValidationMessage For="@(() => @NewDeliveryTicket.PicUrl)" />
                    @*<CaptureImage OnPicUploadStart="@PicUploadStart" OnPicUploadComplete="@PicUploadComplete"/>
                    <ValidationMessage For="@(() => @NewDeliveryTicket.PicUrl)" />*@

                @if (!string.IsNullOrWhiteSpace(_fileUrl))
                {
                    <div class="d-flex justify-start mt-6 popupitemimage">
                        <img src="@_fileUrl" width="300" height="300" />
                    </div>
                }
                @if (success == true && picupload == true && IsStoreSelected)
                {
                    formvalid = true;
                }
                else
                {
                    @*<ValidationMessage For="@(() => @NewDeliveryTicket.NumberOfCarts)" />*@
                    formvalid = false;
                }


            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="Submit"
                   Disabled="@(!formvalid)">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public DeliveryTicketCreationDto? NewDeliveryTicket { get; set; }

    public int NoOfCarts;

    [Parameter]
    public DriverDto? Driver { get; set; }

    [Parameter]
    public List<CartDto>? Carts { get; set; } = new();

    [Parameter]
    public List<StoreDto>? Stores { get; set; } = new();


    [Inject] IJSRuntime JsRuntime { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool success;
    bool picupload;
    bool formvalid;
    bool IsStoreSelected = false;
    string[] errors = { };
    MudForm form;

    public List<StoreDto>? TempStores { get; set; } = new();
    StoreDto _selectedStore = new();
    StoreDto selectedStore = new();

    private string _fileUrl = "";
    private int NoOfCartsToPickUp = 0;
    private string StoreName = "";
    private IJSObjectReference JsModule;

    protected override async Task OnInitializedAsync()
    {
        JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
    }


    protected override void OnParametersSet()
    {
        if (Stores != null && Stores.Count() >= 1)
        {
            Stores = Stores.OrderBy(o => o.StoreName).ThenBy(p => p.StoreNumber).ToList();
            _selectedStore = Stores[0];
            //NewDeliveryTicket.StoreId = _selectedStore.Id;
        }

        NewDeliveryTicket.DriverId = Driver.Id;
        //NoOfCarts = 1;
        //NewDeliveryTicket.NumberOfCarts=NoOfCarts;
    }

    private void UpdateNumberOfCarts()
    {
        NoOfCartsToPickUp = Carts.Count(x => x.StoreId == _selectedStore.Id && x.Status == CartStatus.PickedUp);
    }

    private void UpdateStoreAndServiceProviderIds()
    {
        NewDeliveryTicket.StoreId = _selectedStore.Id;
        var store = Stores.First(x => x.Id == _selectedStore.Id);
        NewDeliveryTicket.ServiceProviderId = store.ServiceProviderId;
    }

    private void PicUploadStart()
    {
        //success = false;
        picupload = false;
    }

    private void PicUploadComplete(string url)
    {
        _fileUrl = url;
        //success = true;
        picupload = true;
        NewDeliveryTicket.PicUrl = _fileUrl;
        StateHasChanged();
    }

    private async Task OnClick()
    {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");

            var inputtext=await JsModule.InvokeAsync<string>("getTextBoxValue");
            if (inputtext == "")
            {
                IsStoreSelected = false;
                await JsModule.InvokeVoidAsync("addValidationClass");
                StateHasChanged();
            }
            else
            {
                IsStoreSelected = true;
                await JsModule.InvokeVoidAsync("removeValidationClass");
                StateHasChanged();
            }
    }
    private async Task OnSelect(object e)
    {
        try
        {
            if(e.ToString()=="")
            {
                IsStoreSelected =  false;
                return;
            }
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");

            var Id = await JsModule.InvokeAsync<string>("getStoreId",e.ToString());
            NewDeliveryTicket.StoreId = new Guid(Id);
            _selectedStore = Stores.AsEnumerable().FirstOrDefault(x => x.Id == NewDeliveryTicket.StoreId);
            StoreName = _selectedStore.StoreName;
            IsStoreSelected = true;
        }
        catch (Exception ex)
        {
            IsStoreSelected =  false;
        }
    }

    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}
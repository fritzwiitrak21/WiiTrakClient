@namespace WiiTrakClient.Features.Drivers.Components
@using System.ComponentModel.DataAnnotations
@using WiiTrakClient.Shared.Components
@using WiiTrakClient.Cores
@using System.Net.Http.Headers
@inject IPicUploadHttpRepository PicUploadHttpRepository

<style>
    .validation-message {
        font-size: 0;
        display: none;
        font-display: block;
        color: red;
    }

    .mud-input-helper-text.mud-input-error {
        font-size: 0;
    }

    .mud-input-helper-text {
        color: var(--mud-palette-text-secondary);
        margin: 0;
        font-size: 0;
    }
</style>
<MudDialog>
    <DialogContent>
        <div style="width: 400px;height:450px;overflow: auto;">
            <MudForm Model="@NewDeliveryTicket" @ref=form @bind-IsValid="@success" @bind-Errors="@errors">
                <DataAnnotationsValidator />
                <div Class="Mudsearchselect mt-6">
                    <label id="targetlabel">Store*</label>
                    <input type="text" list="textsearch" Class="inputselect" @onkeyup="OnClick" @onchange="eventArgs => { OnSelect(eventArgs.Value); }" />

                    <datalist id="textsearch">
                        @foreach (var store in Stores)
                        {
                            <option id="@store.Id" data-value="@store.Id" value="@store.StoreName - @store.StoreNumber" />
                        }
                    </datalist>
                </div>

                @{
                    //UpdateNumberOfCarts();
                    UpdateStoreAndServiceProviderIds();
                }

                <MudTextField @bind-Value="@NewDeliveryTicket.NumberOfCarts" Label="No of Carts" Required="true" RequiredError=" " For="@(() => @NewDeliveryTicket.NumberOfCarts)" Variant="Variant.Text"></MudTextField>
                <PicUpload OnPicUploadStart="@PicUploadStart" OnPicUploadComplete="@PicUploadComplete" IBrowserContent="@SaveIBrowserFile" />

                @if (NewDeliveryTicket.NumberOfCarts >= 0)
                {
                    success = true;
                }
                @if (!string.IsNullOrWhiteSpace(_fileUrl))
                {
                    <div class="d-flex justify-start mt-6 popupitemimage">
                        <img src="@_fileUrl" width="300" height="300" />
                    </div>
                }
                @if (success && picupload && IsStoreSelected)
                {
                    formvalid = true;
                }
                else
                {
                    formvalid = false;
                }


            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="Submit"
                   Disabled="@(!formvalid)">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {    [Parameter]
    public DeliveryTicketCreationDto? NewDeliveryTicket { get; set; }

    public int NoOfCarts;

    [Parameter]
    public DriverDto? Driver { get; set; }

    [Parameter]
    public List<CartDto>? Carts { get; set; } = new();

    [Parameter]
    public List<StoreDto>? Stores { get; set; } = new();
    [Parameter]
    public double Latitude { get; set; }
    [Parameter]
    public double Longitude { get; set; }
    [Inject]
    IJSRuntime JsRuntime { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    public IBrowserFile? UploadedBrowserFile { get; set; }

    bool success;
    bool picupload, Ispicuploadtoblob;
    bool formvalid;
    bool IsStoreSelected = false;
    string[] errors = { };
    MudForm form;

    public List<StoreDto>? TempStores { get; set; } = new();
    StoreDto SelectedStore = new();

    private string _fileUrl = "";
    private int NoOfCartsToPickUp = 0;
    private string StoreName = "";
    private string StoreTimeZoneDiff = "";
    private IJSObjectReference JsModule;



    protected override async Task OnInitializedAsync()
    {
        JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
        try
        {
            await JsModule.InvokeVoidAsync("getCoord", false);
            var coords = await JsModule.InvokeAsync<string>("getCoordinates");
            var lat = coords.Split("##")[0];
            var Lon = coords.Split("##")[1];
            Latitude = Core.ToDouble(lat);
            Longitude = Core.ToDouble(Lon);
            await JsModule.InvokeVoidAsync("ClearCoord");
        }
        catch
        {
            await JsModule.InvokeVoidAsync("ClearCoord");
        }
        if (Stores != null && Stores.Count() >= 1)
        {
            foreach (var item in Stores)
            {
                var distance = Getdistance(item.Latitude, item.Longitude);
                item.Distance = Convert.ToInt32(Math.Ceiling(distance));
            }
            TempStores = Stores;
            FilterStore();
        }
        if (Stores != null && Stores.Count() >= 1)
        {
            FilterStore();
            Stores = Stores.OrderBy(o => o.StoreName).ThenBy(p => p.StoreNumber).ToList();
            SelectedStore = Stores[0];

        }

        NewDeliveryTicket.DriverId = Driver.Id;
    }

    #region Get Distance
    private double Getdistance(double lat2, double lon2, char unit = 'K')
    {
        double lat1 = Latitude;
        double lon1 = Longitude;

        if ((lat1 == lat2) && (lon1 == lon2))
        {
            return 0;
        }
        else
        {
            double theta = lon1 - lon2;
            double dist = Math.Sin(deg2rad(lat1)) * Math.Sin(deg2rad(lat2)) + Math.Cos(deg2rad(lat1)) * Math.Cos(deg2rad(lat2)) * Math.Cos(deg2rad(theta));
            dist = Math.Acos(dist);
            dist = rad2deg(dist);
            dist = dist * 60 * 1.1515;
            if (unit == 'K')
            {
                dist = dist * 1.609344;
            }
            else if (unit == 'N')
            {
                dist = dist * 0.8684;
            }
            return (dist);
        }
    }

    private double deg2rad(double deg)
    {
        return (deg * Math.PI / 180.0);
    }

    private double rad2deg(double rad)
    {
        return (rad / Math.PI * 180.0);
    }
    #endregion


    private void FilterStore()
    {
        Stores = Stores.Where(x => x.Distance < 5).ToList();
        if (Stores.Count == 0)
        {
            Stores = TempStores;
        }
    }
    private void UpdateNumberOfCarts()
    {
        NoOfCartsToPickUp = Carts.Count(x => x.StoreId == SelectedStore.Id && x.Status == CartStatus.PickedUp);
    }

    private void UpdateStoreAndServiceProviderIds()
    {
        NewDeliveryTicket.StoreId = SelectedStore.Id;
        var store = Stores.First(x => x.Id == SelectedStore.Id);
        NewDeliveryTicket.ServiceProviderId = store.ServiceProviderId;
    }

    private void PicUploadStart()
    {
        picupload = false;
    }

    private void PicUploadComplete(string url)
    {
        _fileUrl = url;
        picupload = true;
        StateHasChanged();
    }
    private void SaveIBrowserFile(IBrowserFile File)
    {
        UploadedBrowserFile = File;
    }

    private async Task OnClick()
    {
        if (JsModule is null)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
        }

        var inputtext = await JsModule.InvokeAsync<string>("getTextBoxValue");
        if (inputtext == "")
        {
            IsStoreSelected = false;
            await JsModule.InvokeVoidAsync("addValidationClass");
            StateHasChanged();
        }
        else
        {
            IsStoreSelected = true;
            await JsModule.InvokeVoidAsync("removeValidationClass");
            StateHasChanged();
        }
    }
    private async Task OnSelect(object e)
    {
        try
        {
            if (e.ToString() == "")
            {
                IsStoreSelected = false;
                return;
            }

            if (JsModule is null)
            {
                JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            }

            var Id = await JsModule.InvokeAsync<string>("getStoreId", e.ToString());
            NewDeliveryTicket.StoreId = new Guid(Id);
            SelectedStore = Stores.AsEnumerable().FirstOrDefault(x => x.Id == NewDeliveryTicket.StoreId);
            StoreName = SelectedStore.StoreName;
            StoreTimeZoneDiff  =  SelectedStore.TimezoneDiff;
            IsStoreSelected = true;
        }
        catch
        {
            IsStoreSelected = false;
        }
    }

    private async Task AddCoordAndTime()
    {
        if (JsModule is null)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
        }

        await JsModule.InvokeVoidAsync("getCoord", true);
        var coords = await JsModule.InvokeAsync<string>("getCoordinates");
        await JsModule.InvokeVoidAsync("ClearCoord");
        var lat = coords.Split("##")[0];
        var Lon = coords.Split("##")[1];
        Latitude = Core.ToDouble(lat);
        Longitude = Core.ToDouble(Lon);
        var StoreCurrentTime= DateTime.UtcNow.AddSeconds(Convert.ToDouble(StoreTimeZoneDiff));

        using (var ms = UploadedBrowserFile.OpenReadStream(UploadedBrowserFile.Size))
        {
            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            content.Add(new StreamContent(ms, Convert.ToInt32(UploadedBrowserFile.Size)), "image", UploadedBrowserFile.Name);
            content.Add(new StringContent(Latitude.ToString()), "Latitude");
            content.Add(new StringContent(Longitude.ToString()), "Longitude");
            content.Add(new StringContent(StoreCurrentTime.ToString("dd-MM-yyyy HH:mm:ss")), "Date");

            NewDeliveryTicket.PicUrl = await PicUploadHttpRepository.UploadImage(content);
        }

        if (!string.IsNullOrEmpty(NewDeliveryTicket.PicUrl) && !string.IsNullOrWhiteSpace(NewDeliveryTicket.PicUrl) && NewDeliveryTicket.PicUrl.Length > 5)
        {
            Ispicuploadtoblob = true;
        }

    }

    async Task Submit()
    {
        await AddCoordAndTime();
        while (!Ispicuploadtoblob)
        {
            System.Threading.Thread.Sleep(600);
        }
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}
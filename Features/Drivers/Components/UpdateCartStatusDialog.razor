@namespace WiiTrakClient.Features.Drivers.Components
@using System.ComponentModel.DataAnnotations
@using WiiTrakClient.Shared.Components
@using WiiTrakClient.Cores
@using WiiTrakClient.Enums

<style>
    .validation-message {
        font-size: 0;
        display: none;
        font-display: block;
        color: red;
    }

    .mud-input-helper-text.mud-input-error {
        font-size: 0;
    }

    .mud-input-helper-text {
        color: var(--mud-palette-text-secondary);
        margin: 0;
        font-size: 0;
    }
</style>
<MudDialog>
    <DialogContent>
        <div style="width: 400px;height:450px;overflow: auto;">
            <MudForm Model="@Cart">
                <MudText Typo="Typo.h6" Class="my-1">Store : @Cart.Store.StoreName - @Cart.Store.StoreNumber</MudText>
                <MudText Typo="Typo.h6" Class="my-1">Cart : @Cart.ManufacturerName - Cart# @Cart.CartNumber</MudText>
                <MudSelect Class="my-2" T="String" ValueChanged="(value) => SelectStatus(value)" Value="@SelectedStatus" Label="Select Status" Required=true RequiredError=" "
                           AnchorOrigin="Origin.BottomCenter">

                    <MudSelectItem T="String" Value=@("PickedUp")>Picked Up</MudSelectItem>
                    <MudSelectItem T="String" Value=@("Lost")>Lost</MudSelectItem>

                </MudSelect>
                @if (SelectedStatus.Contains("PickedUp"))
                {
                    <MudSelect Class="my-2" T="String" ValueChanged="(value) => SelectCondition(value)" Value="@SelectedCondition" Label="Select Condition" Required=true RequiredError=" "
                           AnchorOrigin="Origin.BottomCenter">

                        <MudSelectItem T="String" Value=@("Good")>Good</MudSelectItem>
                        <MudSelectItem T="String" Value=@("Damage")>Damage</MudSelectItem>
                        <MudSelectItem T="String" Value=@("DamageBeyondRepair")>Damage Beyond Repair</MudSelectItem>

                    </MudSelect>
                }


                @if (SelectedCondition == "Damage" && RepairIssues is not null)
                {
                    <MudSelect Class="my-2" T="string" Label="Damage Issue" AnchorOrigin="Origin.BottomCenter"
                           Required="true" AdornmentColor="Color.Error" Value="@SeletedIssue"
                           ValueChanged="(value) => SelectIssueType(value)">

                        @foreach (var issue in RepairIssues)
                        {
                            <MudSelectItem T="string" Value="@issue.Issue">@issue.Issue</MudSelectItem>
                        }

                    </MudSelect>
                }
                @if (SeletedIssue.Contains("Other"))
                {
                    <MudTextField T="string" Label="Issue" Variant="Variant.Text" @bind-Value="@IssueNameText" Required="true" AutoFocus="true" />
                    @*<MudTextField T="string" Label="Issue Description" Variant="Variant.Text" Text="@IssueDescText" Lines="5" Required="true" />*@
                }
            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Parameter]
    public CartDto? Cart { get; set; }
    [Parameter]
    public List<RepairIssueDto>? RepairIssues { get; set; }

    string SelectedStatus = string.Empty;
    string SelectedCondition = string.Empty;
    string IssueNameText = string.Empty;
    string IssueDescText = string.Empty;
    string SeletedIssue = string.Empty;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    protected override void OnParametersSet()
    {
        SelectedStatus = Cart.Status.ToString().Contains("OutsideGeofence") ? "Needs Pick Up" : Cart.Status.ToString();
        SelectedCondition = Cart.Condition.ToString();
        if (RepairIssues is not null)
        {
            SeletedIssue = RepairIssues[0].Issue;

            if (!RepairIssues.Any(x => x.Issue.Equals("Other")))
            {
                RepairIssues.Add(new RepairIssueDto
                    {
                        Issue = "Other"
                    });
            }
        }
    }
    private void SelectStatus(string value)
    {
        SelectedStatus = value;
        Cart.Status = Enum.Parse<CartStatus>(value);
    }
    private void SelectCondition(string value)
    {
        SelectedCondition = value;
        Cart.Condition = Enum.Parse<CartCondition>(value);
    }
    private void SelectIssueType(string value)
    {
        SeletedIssue =  value;
    }
    void Submit()
    {
        Cart.DamageIssue = SeletedIssue.Equals("Other") ? IssueNameText : SeletedIssue;
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}
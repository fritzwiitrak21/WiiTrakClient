@namespace WiiTrakClient.Features.Drivers.Components
@using System.ComponentModel.DataAnnotations
@using WiiTrakClient.Shared.Components
@using WiiTrakClient.Cores
@inject ICartHttpRepository CartHttpRepository

<style>
    .validation-message {
        font-size: 0;
        display: none;
        font-display: block;
        color: red;
    }

    .mud-input-helper-text.mud-input-error {
        font-size: 0;
    }

    .mud-input-helper-text {
        color: var(--mud-palette-text-secondary);
        margin: 0;
        font-size: 0;
    }
</style>
<MudDialog>
    <DialogContent>
        <div style="width: 400px;height:450px;overflow: auto;">
            <MudForm Model="@editDeliveryTicket" @ref=form @bind-IsValid="@success" @bind-Errors="@errors">
                <MudSelect Class="my-6" T="StoreDto" Label="Store" AnchorOrigin="Origin.BottomCenter"
                           HelperText="Select a Store" Value="@SelectedStore" ValueChanged="(value) => HandleStore(value)" Required="true"
                           AdornmentColor="Color.Primary">
                    @foreach (var store in Stores)
                    {
                        <MudSelectItem T="StoreDto" Value="@store">@store.StoreNumber - @store.StoreName</MudSelectItem>
                    }
                </MudSelect>

                @{
                    //UpdateNumberOfCarts();
                    UpdateStoreAndServiceProviderIds();
                }

                <MudTextField @bind-Value="@editDeliveryTicket.NumberOfCarts" Label="No of carts" Required="true" For="@(() => @editDeliveryTicket.NumberOfCarts)" Variant="Variant.Text"></MudTextField>
                @if (PickedupCartList != null)
                {
                    <div>
                        <div>
                            <label>Carts List</label>
                        </div>
                        <div class="form-check" style="max-height:75px;overflow-x:auto;min-height:30px">

                            @foreach (var cart in PickedupCartList)
                            {
                                if (SelectdeCartList != null)
                                {
                                    @*   foreach (var selectcart in SelectdeCartList)
                                        {*@
                                    bool test = SelectdeCartList.Where(x => x.Id == cart.Id).ToList().Any();
                                    if (test)
                                    {
                                        <input type="checkbox" id="@cart.Id" value="@cart.CartNumber - @cart.ManufacturerName" checked="checked" @onchange="@((e) => CheckboxChanged(e.Value, cart.Id))" />
                                        <span> @cart.ManufacturerName - #@cart.CartNumber </span> <br />
                                    }
                                    else
                                    {
                                        <input type="checkbox" id="@cart.Id" value="@cart.CartNumber - @cart.ManufacturerName" @onchange="@((e) => CheckboxChanged(e.Value, cart.Id))" />
                                        <span> @cart.ManufacturerName - #@cart.CartNumber </span> <br />
                                    }
                                    // }
                                }
                                else
                                {
                                    <input type="checkbox" id="@cart.Id" value="@cart.CartNumber - @cart.ManufacturerName" @onchange="@((e) => CheckboxChanged(e.Value, cart.Id))" />
                                    <span> @cart.ManufacturerName - #@cart.CartNumber </span> <br />
                                }
                            }
                        </div>
                    </div>
                }
                @if (!string.IsNullOrWhiteSpace(_fileUrl))
                {
                    <div class="d-flex justify-center mt-6 popupitemimage">
                        <img src="@_fileUrl" width="300" height="300" />
                    </div>
                }

            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="Submit"
                   Disabled="@(!success)">Save</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [Parameter]
    public DeliveryTicketUpdateDto? editDeliveryTicket { get; set; }

    [Parameter]
    public DriverDto? Driver { get; set; }

    [Parameter]
    public List<CartDto>? Carts { get; set; } = new();

    [Parameter]
    public List<StoreDto>? Stores { get; set; } = new();
    [Parameter]
    public Guid DeliveryTicketId { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Inject] IJSRuntime JsRuntime { get; set; }
    public List<CartDto> PickedUpCarts { get; set; }
    public List<CartDto> PickedupCartList { get; set; }
    public List<CartDto> TempPickedupCartList { get; set; }
    public List<CartDto> SelectdeCartList { get; set; }
    bool success;
    string[] errors = { };
    MudForm form;

    StoreDto SelectedStore = new();
    private string _fileUrl = "";
    public IBrowserFile? UploadedBrowserFile { get; set; }
    bool Ispicuploadtoblob = true;

    private IJSObjectReference JsModule;

    public double Latitude { get; set; }

    public double Longitude { get; set; }
    private string StoreTimeZoneDiff = "";


    protected override void OnParametersSet()
    {
        if (editDeliveryTicket != null)
        {
            _fileUrl = editDeliveryTicket.PicUrl;
        }

        if (Stores != null && Stores.Count() >= 1)
        {
            SelectedStore = Stores.Where(x => x.Id == editDeliveryTicket.StoreId).FirstOrDefault();
        }

    }
    protected override async Task OnInitializedAsync()
    {
        #region get carts by storeid
        PickedUpCarts = await CartHttpRepository.GetCartsByStoreIdAsync(editDeliveryTicket.StoreId);
        SelectdeCartList = await CartHttpRepository.GetCartsByDeliveryTicketIdAsync(DeliveryTicketId);
        if (PickedUpCarts != null)
        {
            PickedupCartList = PickedUpCarts.Where(x => x.Status == (CartStatus)2 || x.Status == (CartStatus)0).ToList();
            //editDeliveryTicket.NumberOfCarts = PickedupCartList.Count();
        }
        else
        {
            PickedupCartList = new List<CartDto>();
            // editDeliveryTicket.NumberOfCarts = 0;
        }
        TempPickedupCartList = SelectdeCartList;
        StateHasChanged();
        #endregion
    }

    private void UpdateNumberOfCarts()
    {
        editDeliveryTicket.NumberOfCarts = Carts.Count(x => x.StoreId == SelectedStore.Id && x.Status == CartStatus.PickedUp);
    }

    private void UpdateStoreAndServiceProviderIds()
    {
        //try
        //{
        //    editDeliveryTicket.StoreId = SelectedStore.Id;
        //    var store = Stores.First(x => x.Id == SelectedStore.Id);
        //    editDeliveryTicket.ServiceProviderId = store.ServiceProviderId;
        //}
        //catch (Exception ex)
        //{

        //}
    }
    async Task CheckboxChanged(object IsChecked, Guid Id)
    {
        if ((bool)IsChecked)
        {
            editDeliveryTicket.NumberOfCarts = editDeliveryTicket.NumberOfCarts + 1;
            //TempPickedupCartList.AddRange(PickedupCartList.Where(x => x.Id == Id).ToList());
            SelectdeCartList.AddRange(PickedupCartList.Where(x => x.Id == Id).ToList());
        }
        else
        {
            editDeliveryTicket.NumberOfCarts = editDeliveryTicket.NumberOfCarts - 1;
            //TempPickedupCartList.RemoveAll(x => x.Id == Id);
            SelectdeCartList.RemoveAll(x => x.Id == Id);
        }
        TempPickedupCartList = SelectdeCartList;
        editDeliveryTicket.PickedUpCarts = TempPickedupCartList;
        PickedupCartList = PickedUpCarts.Where(x => x.Status == (CartStatus)2 || x.Status == (CartStatus)0).ToList();
        StateHasChanged();
    }
    public async Task HandleStore(StoreDto store)
    {
        PickedUpCarts = await CartHttpRepository.GetCartsByStoreIdAsync(store.Id);
        if (PickedUpCarts != null)
        {
            PickedupCartList = PickedUpCarts.Where(x => x.Status == (CartStatus)2 || x.Status == (CartStatus)0).ToList();
            editDeliveryTicket.NumberOfCarts = PickedupCartList.Count();
        }
        else
        {
            PickedupCartList = new List<CartDto>();
            editDeliveryTicket.NumberOfCarts = 0;
        }
        TempPickedupCartList = PickedupCartList;
        SelectdeCartList = await CartHttpRepository.GetCartsByDeliveryTicketIdAsync(DeliveryTicketId);
        SelectedStore = store;
        StateHasChanged();
    }
    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}

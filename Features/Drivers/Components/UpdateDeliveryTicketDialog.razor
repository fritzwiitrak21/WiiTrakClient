@namespace WiiTrakClient.Features.Drivers.Components
@using System.ComponentModel.DataAnnotations
@using WiiTrakClient.Shared.Components

<style>
    .validation-message {
    font-size:0;
    display:none;
    font-display:block;
    
    color: red;
}
.mud-input-helper-text.mud-input-error {
    font-size: 0;
}
.mud-input-helper-text {
    color: var(--mud-palette-text-secondary);
    margin: 0;
    font-size: 0;
    
}      
</style>

<MudDialog>
    <DialogContent>
        <div style="width: 400px;height:450px;overflow: auto;">
            <MudForm Model="@editDeliveryTicket" @ref=form @bind-IsValid="@success" @bind-Errors="@errors">
                <MudSelect Class="my-6" T="StoreDto" Label="Store" AnchorOrigin="Origin.BottomCenter"
                    HelperText="Select a Store" @bind-Value="@_selectedStore" Required="true"
                    AdornmentColor="Color.Primary">
                    @foreach (var store in Stores)
                    {
                        <MudSelectItem T="StoreDto" Value="@store">@store.StoreNumber - @store.StoreName</MudSelectItem>
                    }
                </MudSelect>

                @{
                    //UpdateNumberOfCarts();                  
                    UpdateStoreAndServiceProviderIds();
                }

                @*<MudText Class="my-4" Typo="Typo.h5">Number available carts to pickup: @editDeliveryTicket.NumberOfCarts</MudText>*@
                 <MudTextField @bind-Value="@editDeliveryTicket.NumberOfCarts" Label="No of carts" Required="true" For="@(() => @editDeliveryTicket.NumberOfCarts)" Variant="Variant.Text"></MudTextField>
                <PicUpload OnPicUploadStart="@PicUploadStart" OnPicUploadComplete="@PicUploadComplete" />

                @if (!string.IsNullOrWhiteSpace(_fileUrl)) {
                    <div class="d-flex justify-center mt-6 popupitemimage">
                        <img src="@_fileUrl" width="300" height="300" />
                    </div>
                }
                
            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                OnClick="Submit" 
                Disabled="@(!success)">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public DeliveryTicketUpdateDto? editDeliveryTicket { get; set; }

    [Parameter]
    public DriverDto? Driver { get; set; }

    [Parameter]
    public List<CartDto>? Carts { get; set; } = new();

    [Parameter]
    public List<StoreDto>? Stores { get; set; } = new();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool success;
    string[] errors = { };
    MudForm form;

    StoreDto _selectedStore = new();
    private string _fileUrl = "";

    
    protected override void OnParametersSet()
    { 
        if(editDeliveryTicket != null)
        {
            _fileUrl = editDeliveryTicket.PicUrl;
        }
        
        if (Stores != null && Stores.Count() >= 1) 
        {
            _selectedStore = Stores.Where(x => x.Id == editDeliveryTicket.StoreId).FirstOrDefault();
        }
    }

    private void UpdateNumberOfCarts() 
    {
        editDeliveryTicket.NumberOfCarts = Carts.Count(x => x.StoreId == _selectedStore.Id && x.Status == CartStatus.PickedUp);
    }

    private void UpdateStoreAndServiceProviderIds()
    {
        editDeliveryTicket.StoreId = _selectedStore.Id;
        var store = Stores.First(x => x.Id == _selectedStore.Id);
        editDeliveryTicket.ServiceProviderId = store.ServiceProviderId;
    }

    private void PicUploadStart() 
    {
        success=false;
    }
   
    private void PicUploadComplete(string url)
    {
        _fileUrl = url;
        success=true; 
        editDeliveryTicket.PicUrl = _fileUrl;
        StateHasChanged();
    }

    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}

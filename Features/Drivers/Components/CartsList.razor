@using WiiTrakClient.Features.Drivers.Components
@inject IDialogService DialogService
@inject ICartHttpRepository CartHttpRepository

<h1>Carts List</h1>


 <MudTable Items="@Carts" Hover="true" SortLabel="Sort By">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<CartDto, object>(x=>x.PicUrl)">Photo</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="@_enabled" SortBy="new Func<CartDto, object>(x=>x.Store.StoreName)">Store</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<CartDto, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<CartDto, object>(x=>x.Condition)">Condition</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Photo">
            <img src="@context.PicUrl" width="48" height="48"/>
        </MudTd>
        <MudTd DataLabel="Store">@context.Store.StoreName #@context.Store.StoreNumber</MudTd>
        <MudTd DataLabel="Status">
            @switch (context.Status) {
                case AssetStatus.InsideGeofence:
                    <span style="background:#90ee90;padding:2px;">Delivered</span>
                break;
                case AssetStatus.OutsideGeofence:
                    <span style="background:#ffffe0;padding:2px;">Needs Pick Up</span>
                break;
                case AssetStatus.PickedUp:
                    <span style="background:#90ee90;padding:2px;">Picked Up</span>
                break;
                case AssetStatus.Lost:
                    <span style="background:#ff474c;padding:2px;">Lost</span>
                break;
            }

        </MudTd>
        <MudTd DataLabel="Condition">
             @switch (context.Condition) {
                case AssetCondition.Good:
                    <span style="background:#90ee90;padding:2px;">Good</span>
                break;
                case AssetCondition.Damage:
                    <span style="background:#ff474c;padding:2px;">Damage</span>
                break;
                case AssetCondition.DamageBeyondRepair:
                    <span style="background:#ff474c;padding:2px;">Damage Beyond Repair</span>
                break;
            }
        </MudTd>
        <MudTd DataLabel="Action">           
            <MudButton 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                OnClick="((e) => OpenDialog(context))">Update
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public List<CartDto>? Carts {get; set;} = null;
    private bool _enabled = true;
    public async Task OpenDialog(CartDto cart) {

        Console.WriteLine("cart id: " + cart.Id);

        var parameters = new DialogParameters();
                parameters.Add("Cart", cart);   

         DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };

        var dialog  = DialogService.Show<UpdateCartDialog>("Update Cart", parameters);
        var result = await dialog.Result; 

        if (!result.Cancelled) 
        {
            // save updated cart to backend
            var cartUpdate = new CartUpdateDto {
                ManufacturerName = cart.ManufacturerName,
                DateManufactured = cart.DateManufactured,
                OrderedFrom = cart.OrderedFrom,
                Condition = cart.Condition,
                Status = cart.Status,
                PicUrl = cart.PicUrl,
                IsProvisioned = cart.IsProvisioned,
                BarCode = cart.BarCode,
                StoreId = cart.StoreId
            };
           await CartHttpRepository.UpdateCartAsync(cart.Id, cartUpdate);
        }
    }
}
@namespace WiiTrakClient.Features.Stores.Components
@using System.ComponentModel.DataAnnotations
@using System.Collections

<style>
    .validation-message {
    font-size:0;
    display:none;
    font-display:block;
    color: red;
}
.mud-input-helper-text.mud-input-error {
    font-size: 0;
}
.mud-input-helper-text {
    color: var(--mud-palette-text-secondary);
    margin: 0;
    font-size: 0;
}
</style> 

<MudDialog>
    <DialogContent>              
        <div style="width: 400px;height:450px;overflow: auto;">
                <MudForm @ref=form Model="@NewCart" @bind-IsValid="@success" @bind-Errors="@errors">  
                    <DataAnnotationsValidator />
                    <MudTextField T="string" class="my-6" @bind-Value="NewCart.CartNumber" Label="Cart Number" Required="true" RequiredError=" " For="@(() => @NewCart.CartNumber)" Variant="Variant.Text"></MudTextField>  
                    <MudTextField T="string" class="my-6" @bind-Value="NewCart.ManufacturerName" Label="Manufacturer Name" Required="true" RequiredError=" " For="@(() => @NewCart.ManufacturerName)" Variant="Variant.Text"></MudTextField>
                    <MudDatePicker Label="Manufactured Date" Class="my-6" Editable="true" @bind-Date="NewCart.DateManufactured" Required=true RequiredError=" " For="@(() => @NewCart.DateManufactured)" />
                    <MudItem>
                    <MudSelect T="string" Value=@SelectedOrderFrom ValueChanged="(value) => HandleCartOrder(value)"  
                        Label="Select Cart Ordered From" AnchorOrigin="Origin.BottomCenter">
                        @for(int i = 0; i < CartOrder.Length; i++)
                        {
                            string str = CartOrder[i];
                            <MudSelectItem T="string" Value="@i.ToString()">@str</MudSelectItem>
                        }
                    </MudSelect> 
                    </MudItem>
                    <br />
                    <MudItem>
                    <MudSelect T="string" Value=@SelectedStatus ValueChanged="(value) => HandleStatus(value)"  
                        Label="Select Cart Status" AnchorOrigin="Origin.BottomCenter">
                        @for(int i = 0; i < CartStatus.Length; i++)
                        {
                            string str = CartStatus[i];
                            <MudSelectItem T="string" Value="@i.ToString()">@str</MudSelectItem>
                        }
                    </MudSelect> 
                    </MudItem>
                    <br />
                    <MudItem>
                    <MudSelect T="string" ReadOnly=true Value=@SelectedCondition ValueChanged="(value) => HandleCondition(value)"  
                        Label="Select Cart Condition" AnchorOrigin="Origin.BottomCenter">
                        @for(int i = 0; i < CartCondition.Length; i++)
                        {
                            string str = CartCondition[i];
                            <MudSelectItem T="string" Value="@i.ToString()">@str</MudSelectItem>
                        }
                    </MudSelect> 
                    </MudItem>
                    <br />
                    <div class="d-flex">
                        <MudButton OnClick="Cancel">Cancel</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="Submit" Class="ml-auto">Save</MudButton>
                    </div>
                    <br />
                </MudForm> 
        </div>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public CartCreationDto? NewCart {get; set;}
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool success;
    string[] errors = { };
    MudForm form;
    string[] CartOrder = new string[3];
    string[] CartStatus = new string[5];
    string[] CartCondition = new string[3];
    public string SelectedOrderFrom = "";
    public string SelectedStatus = "";
    public string SelectedCondition = "Good";
    protected override async Task OnInitializedAsync()
    {
        CartOrder = Enum.GetNames(typeof(CartOrderedFrom));
        CartStatus = Enum.GetNames(typeof(CartStatus));
        CartCondition = Enum.GetNames(typeof(CartCondition));
    }
    protected override void OnParametersSet()
    {
    }
    public async Task HandleCartOrder(string value)
    {
        NewCart.OrderedFrom = (CartOrderedFrom)Convert.ToInt32(value);
        SelectedOrderFrom = value;
    }
    public async Task HandleStatus(string value)
    {
        NewCart.Status = (CartStatus)Convert.ToInt32(value);
        SelectedStatus = value;
    }
    public async Task HandleCondition(string value)
    {
        NewCart.Condition = (CartCondition)Convert.ToInt32(value);
        SelectedCondition = value;
    }
    void Submit() 
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();
}

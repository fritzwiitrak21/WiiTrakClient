@namespace WiiTrakClient.Features.Stores.Components
@using WiiTrakClient.Shared.Components

@inject IJSRuntime _js;
<MudDialog>
    <DialogContent>
        <div style="width: 400px;height:450px;overflow: auto;">
            <MudForm Model="@editDeliveryTicket">
            <MudText Class="my-4" Typo="Typo.h5">Store: @StoreName</MudText>
            <MudText Class="my-4" Typo="Typo.h5">Number of Carts: @deliveryTicketDto.NumberOfCarts</MudText>
            @if(deliveryTicketSummary != null)
            {
               
                <MudText Class="" Typo="Typo.h6">Delivered: @deliveryTicketSummary.Delivered</MudText>
                        
                <MudText Class="" Typo="Typo.h6">Lost: @deliveryTicketSummary.Lost</MudText>
                       
                <MudText Class="" Typo="Typo.h6">Damaged: @deliveryTicketSummary.Damaged</MudText>
                       
                <MudText Class="" Typo="Typo.h6">Trashed: @deliveryTicketSummary.Trashed</MudText>
                       
            }
           
            @if (!string.IsNullOrWhiteSpace(_fileUrl)) {
                    <div class="d-flex justify-center mt-6">
                        <img src="@_fileUrl" width="300" height="300" />
                    </div>
                }
                @*<div id="divResize" class="col-lg-6 col-sm-12">
                    <SSignature SignObject="ctlSignature"
                        RefreshImage="/images/clear.png"
                        PenCursor="/images/pen.cur"
                        SignWidth="450"
                        SignHeight="300"
                        PenColor="blue"
                        RequiredPoints="50">
                    </SSignature>
                </div>*@


            @if (!_isSigned) {
                  <MudButton Variant="Variant.Filled" Color="Color.Primary"
                    OnClick="OnSignatureComplete">Sign
                </MudButton>
            } else {
                <MudText Typo="Typo.h4">Signature Complete</MudText>
            }
              
                
            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                OnClick="Submit" 
                Disabled="_disableSaveButton">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public DeliveryTicketDto? deliveryTicketDto{ get; set; }

    [Parameter]
    public string StoreName { get; set; }

    [Parameter]
    public DeliveryTicketSummaryDto? deliveryTicketSummary{ get; set; }

    [Parameter]
    public DeliveryTicketUpdateDto? editDeliveryTicket { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private string _fileUrl = "";
    bool _disableSaveButton = false;
    bool _isSigned = false;

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var targetUrl = "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js";
        await _js.InvokeVoidAsync("loadJs", targetUrl);

        targetUrl = "js/ss.js";
        await _js.InvokeVoidAsync("loadJs", targetUrl);

        targetUrl = "js/ss.ui.js";
        await _js.InvokeVoidAsync("loadJs", targetUrl);

        await base.OnAfterRenderAsync(firstRender);
    }
    private void PicUploadStart() 
    {
        _disableSaveButton = true;
    }

    private void PicUploadComplete(string url)
    {
        _fileUrl = url;
        _disableSaveButton = false;
        editDeliveryTicket.SignaturePicUrl = _fileUrl;
        editDeliveryTicket.ApprovedByStore = true;
    }

    private void OnSignatureComplete() 
    {
        editDeliveryTicket.ApprovedByStore = true;
        _isSigned = true;
    }

    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}

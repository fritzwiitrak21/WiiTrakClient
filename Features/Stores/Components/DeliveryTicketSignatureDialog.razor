@namespace WiiTrakClient.Features.Stores.Components
@using WiiTrakClient.Shared.Components
@implements IAsyncDisposable
@using System.Net.Http.Headers
@using System.Net.Mime
@using System.Text



<MudDialog>
    <DialogContent>
        <div style="width: 400px;height:450px;overflow: auto;">
            <MudForm Model="@editDeliveryTicket">
            <MudText Class="my-4" Typo="Typo.h5">Store: @StoreName</MudText>
            <MudText Class="my-4" Typo="Typo.h5">Number of Carts: @deliveryTicketDto.NumberOfCarts</MudText>
            @if(deliveryTicketSummary != null)
            {
               
                <MudText Class="" Typo="Typo.h6">Delivered: @deliveryTicketSummary.Delivered</MudText>
                        
                <MudText Class="" Typo="Typo.h6">Lost: @deliveryTicketSummary.Lost</MudText>
                       
                <MudText Class="" Typo="Typo.h6">Damaged: @deliveryTicketSummary.Damaged</MudText>
                       
                <MudText Class="" Typo="Typo.h6">Trashed: @deliveryTicketSummary.Trashed</MudText>
                       
            }
            @if(cartsTable != null)
            {
           <CartsTable Carts="@cartsTable"></CartsTable>
            }
            @if (!string.IsNullOrWhiteSpace(_fileUrl)) {
                    <div class="d-flex justify-center mt-6">
                        <img src="@_fileUrl" width="300" height="300" />
                    </div>
                }
                else
                {
                <div id="divResize" class="">
                    <SSignature SignObject="ctlSignature"
                        RefreshImage="/images/clear.png"
                        PenCursor="/images/pen.cur"
                        SignWidth="450"
                        SignHeight="300"
                        PenColor="blue"
                        RequiredPoints="50">
                    </SSignature>
                </div>
                }

            @if (!_isSigned) {
                  <MudButton Variant="Variant.Filled" Color="Color.Primary"
                    OnClick="SaveSignature">Sign
                </MudButton>
            } else {
                <MudText Typo="Typo.h4">Signature Complete</MudText>
            }
              
                
            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                OnClick="Submit" 
                Disabled="_disableSaveButton">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public DeliveryTicketDto? deliveryTicketDto{ get; set; }

    [Parameter]
    public string StoreName { get; set; }

    [Parameter]
    public DeliveryTicketSummaryDto? deliveryTicketSummary{ get; set; }

    [Parameter]
    public DeliveryTicketUpdateDto? editDeliveryTicket { get; set; }

    [Parameter]
    public List<CartDto>? cartsTable { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    public IPicUploadHttpRepository PicUploadHttpRepository {get; set;}
    [Inject] IJSRuntime _js {
        get;
        set;
    }
    IJSObjectReference module;
    private string _fileUrl = "";
    bool _disableSaveButton = false;
    bool _isSigned = false;

    private void PicUploadStart() 
    {
        _disableSaveButton = true;
    }

    private void PicUploadComplete(string url)
    {
        _fileUrl = url;
        _disableSaveButton = false;
        editDeliveryTicket.SignaturePicUrl = _fileUrl;
        editDeliveryTicket.ApprovedByStore = true;
    }

    private void OnSignatureComplete() 
    {
        editDeliveryTicket.ApprovedByStore = true;
        _isSigned = true;
    }

    private async Task SaveSignature() 
     {
         _disableSaveButton = false;
         editDeliveryTicket.ApprovedByStore = true;
        _isSigned = true;
         var dotNetObjectRef = DotNetObjectReference.Create(this);
         await _js.InvokeAsync<string>("saveSignatureAsync", dotNetObjectRef);
     }

     [JSInvokable]
     public async Task SaveSignatureAsync(string imageData)
     {
         var imageDataStripped = imageData.Replace("data:image/png;base64,", "");
         var imageByteArray = Convert.FromBase64String(imageDataStripped);

         await using var memoryStream = new MemoryStream(imageByteArray);

         var content = new MultipartFormDataContent();
         content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
         var streamContent = new StreamContent(memoryStream, Convert.ToInt32(memoryStream.Length));
         streamContent.Headers.ContentType = new MediaTypeHeaderValue("image/png");
         content.Add(streamContent, "file", "signature.png");
         _fileUrl = await PicUploadHttpRepository.UploadSignature(content);
         _disableSaveButton = true;
         StateHasChanged();
     }

    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();

    async ValueTask IAsyncDisposable.DisposeAsync() {
        if (module is not null) {
            await module.DisposeAsync();
        }
    }
}

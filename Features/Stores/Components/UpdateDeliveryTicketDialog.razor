@namespace WiiTrakClient.Features.Stores.Components
@using System.ComponentModel.DataAnnotations
@using WiiTrakClient.Shared.Components

<style>
    .validation-message {
        font-size: 0;
        display: none;
        font-display: block;
        color: red;
    }

    .mud-input-helper-text.mud-input-error {
        font-size: 0;
    }

    .mud-input-helper-text {
        color: var(--mud-palette-text-secondary);
        margin: 0;
        font-size: 0;
    }
</style>

<MudDialog>
    <DialogContent>
        <div style="width: 400px;height:450px;overflow: auto;">
            <MudForm Model="@editDeliveryTicket" @ref=form @bind-IsValid="@success" @bind-Errors="@errors">

                @{
                    //UpdateNumberOfCarts();
                    UpdateStoreAndServiceProviderIds();
                }

                <MudTextField @bind-Value="@editDeliveryTicket.NumberOfCarts" Label="No of carts" Required="true" For="@(() => @editDeliveryTicket.NumberOfCarts)" Variant="Variant.Text"></MudTextField>

                @if (!string.IsNullOrWhiteSpace(_fileUrl))
                {
                    <div class="d-flex justify-center mt-6 popupitemimage">
                        <img src="@_fileUrl" width="300" height="300" />
                    </div>
                }

            </MudForm>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="Submit"
                   Disabled="@(!success)">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public DeliveryTicketUpdateDto? editDeliveryTicket { get; set; }

    [Parameter]
    public DriverDto? Driver { get; set; }

    [Parameter]
    public List<CartDto>? Carts { get; set; } = new();

    [Parameter]
    public List<StoreDto>? Stores { get; set; } = new();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool success;
    string[] errors = { };
    MudForm form;

    StoreDto SelectedStore = new();
    private string _fileUrl = "";


    protected override void OnParametersSet()
    {
        if (editDeliveryTicket != null)
        {
            _fileUrl = editDeliveryTicket.PicUrl;
        }

        if (Stores != null && Stores.Count() >= 1)
        {
            SelectedStore = Stores.Where(x => x.Id == editDeliveryTicket.StoreId).FirstOrDefault();
        }
    }

    private void UpdateNumberOfCarts()
    {
        editDeliveryTicket.NumberOfCarts = Carts.Count(x => x.StoreId == SelectedStore.Id && x.Status == CartStatus.PickedUp);
    }

    private void UpdateStoreAndServiceProviderIds()
    {
        editDeliveryTicket.StoreId = SelectedStore.Id;
        var store = Stores.First(x => x.Id == SelectedStore.Id);
        editDeliveryTicket.ServiceProviderId = store.ServiceProviderId;
    }

    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}

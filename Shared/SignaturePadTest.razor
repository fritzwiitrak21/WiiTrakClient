@page "/signature-pad-test"
@using System.Net.Http.Headers
@using System.Net.Mime
@using System.Text

@inject IJSRuntime js

<h3>Signature Pad Test</h3>


<h1 id="bTitle">SuperSignature Blazor</h1>

<div class="row">
    <div id="divResize" class="col-lg-6 col-sm-12">
        <SSignature SignObject="ctlSignature"
                    RefreshImage="/images/clear.png"
                    PenCursor="/images/pen.cur"
                    SignWidth="450"
                    SignHeight="300"
                    PenColor="blue"
                    RequiredPoints="50">
        </SSignature>
    </div>
    <div class="col-lg-6 col-sm-12">
        <img src="/images/spacer.png" id="pngImg"/>
    </div>
</div>

<input type="button" class="btn btn-primary" value="Save" @onclick="SaveSignature"/>


@if (!string.IsNullOrWhiteSpace(_imageUrl)) {
    <MudText class="my-12" Typo="Typo.h3">
        _imageUrl
    </MudText>
}

@code {
    [Inject]
    public IPicUploadHttpRepository PicUploadHttpRepository {get; set;}
    private string _imageUrl = "";

     private async Task SaveSignature() 
     {
         var dotNetObjectRef = DotNetObjectReference.Create(this);
         await js.InvokeAsync<string>("saveSignatureAsync", dotNetObjectRef);
     }

     [JSInvokable]
     public async Task SaveSignatureAsync(string imageData)
     {
         Console.Write(imageData);

         var imageDataStripped = imageData.Replace("data:image/png;base64,", "");
         var imageByteArray = Convert.FromBase64String(imageDataStripped);

         var memoryStream = new MemoryStream();
         memoryStream.Write(imageByteArray, 0, imageByteArray.Length);

         var content = new MultipartFormDataContent();
         content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");

         Console.WriteLine("len: " + memoryStream.Length);
         var streamContent = new StreamContent(memoryStream, Convert.ToInt32(memoryStream.Length));
         streamContent.Headers.ContentType = new MediaTypeHeaderValue("image/png");
         content.Add(streamContent, "file", "signature.png");
         _imageUrl = await PicUploadHttpRepository.UploadSignature(content);
     }
 }

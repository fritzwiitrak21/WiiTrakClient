@inherits LayoutComponentBase
@using WiiTrakClient.Cores
@using WiiTrakClient.Shared.Components
@inject INotificationHttpRepository NotifyHttpRepository

<MudThemeProvider Theme="_themeManager.Theme" />
<MudDialogProvider FullWidth="false"
                   MaxWidth="MaxWidth.ExtraLarge"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   NoHeader="false"
                   Position="DialogPosition.Center" />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="_themeManager.AppBarElevation">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            @*<MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" />*@
            @*<img src="/images/wiitrak_logo_80x40.png" width="80" height="40" /> *@
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs">
            <div Class="welcomemsg">Welcome to <span>WiiTrak</span></div>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
            <MudText Typo="Typo.subtitle2">WiiTrak</MudText>
        </MudHidden>
        <MudSpacer />
        @if (CurrentUser.UserRoleId == 5)//Driver
        {
            if (Core.NotificationCount > 0)
            {
                <MudBadge Content="@Core.NotificationCount" Overlap="true" Color="Color.Error" Class="mx-6 my-4">
                    <MudIconButton Icon="@Icons.Filled.Notifications" Class="p-0" OnClick="Notification" Color="Color.Primary" Link="/notify" />
                </MudBadge>
            }
            else
            {
                <MudBadge Content="@Core.NotificationCount" Overlap="true" Color="Color.Error" Class="mx-6 my-4 Count0">
                    <MudIconButton Icon="@Icons.Filled.Notifications" OnClick="Notification" Class="p-0" Color="Color.Primary" Link="/notify" />
                </MudBadge>
            }
            {
                var startTimeSpan = TimeSpan.FromSeconds(50);
                var periodTimeSpan = TimeSpan.FromSeconds(59);
                var timer = new System.Threading.Timer((e) =>
                {
                    Notification();
                }, null, startTimeSpan, periodTimeSpan);




            }
        }

        @* <MudMenu Icon="@Icons.Material.Outlined.Widgets" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true" Dense="true">
            <MudMenuItem Link="https://mudblazor.com/">MudBlazor</MudMenuItem>
            <MudMenuItem Link="https://github.com/Garderoben/MudBlazor.Templates">Source Code</MudMenuItem>
            </MudMenu>*@

        <MudMenu Direction="Direction.Left" OffsetX="true" Dense="true" Class="mt-1">
            <ActivatorContent>
                <PersonCard Style="background-color: transparent;" />
            </ActivatorContent>
            <ChildContent>
                <PersonCard Class="" />
                <MudDivider Class="mb-2" />
                <MudListItem Text="Account" Icon="@Icons.Material.Outlined.Person" Href="/profile-info" />
                @*<MudListItem Text="Change Password" Icon="@Icons.Material.Outlined.Password" Href="/change-password" />*@
                <MudListItem Text="Logout" Icon="@Icons.Material.Outlined.Logout" Href="/logout" />

            </ChildContent>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="_themeManager.DrawerElevation" ClipMode="_themeManager.DrawerClipMode">
        <div class="sidebarbrand">
            <img src="/images/WiiTrak-logo.png" width="96" height="" />
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
        </div>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudToolBar DisableGutters="true">
                @* <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />*@
                @*<MudBreadcrumbs Items="_items"></MudBreadcrumbs>*@
                <MudSpacer />
            </MudToolBar>
        </MudHidden>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
    @*<MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
        <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />*@
</MudLayout>

@code
{
    [Inject] IJSRuntime JsRuntime { get; set; }
    private IJSObjectReference JsModule;
    protected override async Task OnInitializedAsync()
    {
        await Notification();

    }
    private async Task Notification()
    {
        if (CurrentUser.UserId == Guid.Empty)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            var Id = await JsModule.InvokeAsync<string>("getUserId");
            CurrentUser.UserId = new Guid(Id);
            var roleid = await JsModule.InvokeAsync<string>("getUserRoleId");
            CurrentUser.UserRoleId = Convert.ToInt32(roleid);
        }

        if (CurrentUser.UserRoleId != 5) return;
        Core.NotificationsList = await NotifyHttpRepository.GetNotificationIdAsync(CurrentUser.UserId);
        Core.NotificationCount = Core.NotificationsList.Where(x => x.IsNotified == false).Count();
        StateHasChanged();
    }

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme
        {
            Theme = new MudBlazorAdminDashboard(),
            DrawerClipMode = DrawerClipMode.Always,
            FontFamily = "Montserrat",
            DefaultBorderRadius = 6,
            AppBarElevation = 1,
            DrawerElevation = 1
        };

    public bool _drawerOpen = true;
    public bool _themeManagerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Personal", href: "/profile-info"),
        new BreadcrumbItem("Dashboard", href: "/index"),
    };
}

@page "/display-gmap"
@namespace WiiTrakClient.Shared.Components
@using WiiTrakClient.Shared.Components
@using WiiTrakClient.Cores

<MudDialog>
    <DialogContent>
        <div style="width:1000px;height:470px;overflow: auto;">
            <h6>Address:</h6>
            @Address<br />
            <div id="container">
                <div id="map" style="height:400px;width:100%;"></div>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] IJSRuntime JsRuntime { get; set; }
    private IJSObjectReference JsModule, JsModule1;

    [Parameter]
    public string Address { get; set; } = string.Empty;
    [Parameter]
    public double StoreLatitude { get; set; }
    [Parameter]
    public double StoreLongitude { get; set; }
    [Parameter]
    public double DriverLatitude { get; set; }
    [Parameter]
    public double DriverLongitude { get; set; }


    protected override async Task OnInitializedAsync()
    {

        JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
        await JsModule.InvokeVoidAsync("getCoord", false);
        var CurrentCoord = await JsModule.InvokeAsync<string>("getCoordinates");


        if (!string.IsNullOrEmpty(CurrentCoord))
        {
            DriverLatitude = Core.ToDouble(CurrentCoord.Split("##")[0]);
            DriverLongitude = Core.ToDouble(CurrentCoord.Split("##")[1]);
        }
        else
        {
            await JsModule.InvokeVoidAsync("getCoord", false);
            CurrentCoord = await JsModule.InvokeAsync<string>("getCoordinates");

            DriverLatitude = Core.ToDouble(CurrentCoord.Split("##")[0]);
            DriverLongitude = Core.ToDouble(CurrentCoord.Split("##")[1]);
        }
        await JsModule.InvokeVoidAsync("ClearCoord");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JsModule1 = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/GoogleMaps.js");
            await JsModule1.InvokeVoidAsync("initMap", StoreLatitude, StoreLongitude, DriverLatitude, DriverLongitude);
            //await JsModule.InvokeVoidAsync("initMap", StoreLatitude, StoreLongitude, StoreLatitude - 0.02, StoreLongitude - 0.02);
        }
    }
}

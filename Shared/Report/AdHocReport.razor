@page "/report"

@using WiiTrakClient.Services;
@inject Microsoft.JSInterop.IJSRuntime JsRuntime
@using WiiTrakClient.Cores;
@using ClosedXML.Excel;
@inject IDeliveryTicketHttpRepository DeliveryTicketHttpRepository

<UserAuthentication />
<h3 class="pageheader">Reports</h3>


<div class="col-md-12">
    <div class="row">
        <div class="col-md-7 col-sm-12">
            <div class="filtercard">
                <div class="filtercardbody">
                    <div class="filteritem">
                        <MudDatePicker Label="Start Date" Editable="true" MaxDate="Enddate" @bind-Date="Startdate" Placeholder="Select Start Date" />
                    </div>
                    <div class="filteritem">
                        <MudDatePicker Label="End Date" Editable="true" MinDate="Startdate" MaxDate="Enddate" @bind-Date="Enddate" Placeholder="Select End Date" />
                    </div>
                </div>
                <div class="filterlapbtn">

                    <MudIconButton Icon="@Icons.Outlined.Search"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   OnClick="Search"
                                   Class="Datebutton" />
                </div>
            </div>
        </div>
        <div class="col-md-5 col-sm-12">
            <div class="filtercard">
                <div class="filtercardbody">
                    <div class="filteritem">
                        <MudText Class="my-4" Typo="Typo.h6">Total Deliveries:</MudText>
                        <span class="itemcount">@TotalNoofDeliveries</span>
                    </div>
                    <div class="filteritem">
                        <MudText Class="my-4" Typo="Typo.h6">Total Carts:</MudText>
                        <span class="itemcount">@TotalNoofCarts</span>
                    </div>
                </div>
                <div class="filterlapbtn">
                    @if (TotalNoofCarts > 0 && TotalNoofDeliveries > 0 && CurrentUser.UserRoleId != 5)
                    {
                        <MudIconButton Icon="@Icons.Outlined.FileDownload"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   OnClick="ExportExcel"
                                   Class="Datebutton" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@if (LoaderVisibility)
{
    <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
}
else
{
    if (_deliveryTickets.Count > 0)
    {
        <ReportDeliveryTicketsList _ReportDeliveryTicketsList="_deliveryTickets" />
    }
    else
    {
        <MudText Class="my-4" Typo="Typo.h6">No data found.</MudText>

    }
}


@code {
    public static int Fourteen { get; set; } = 14;
    DateTime? Startdate { get; set; } = DateTime.Today.AddDays(-(Fourteen));
    DateTime? Enddate { get; set; } = DateTime.Today;

    int TotalNoofDeliveries { get; set; } = 0;
    int TotalNoofCarts { get; set; } = 0;
    List<DeliveryTicketDto> _deliveryTickets = new();
    private MemoryStream ms;
    private IJSObjectReference JsModule;
    bool LoaderVisibility { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await Search();
    }

    protected async Task Search()
    {
        try
        {
            LoaderVisibility = true;

            if (CurrentUser.UserId == Guid.Empty)
            {
                if (JsModule is null)
                {
                    JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
                }
                var Id = await JsModule.InvokeAsync<string>("getUserId");
                CurrentUser.UserId = new Guid(Id);
                var roleid = await JsModule.InvokeAsync<string>("getUserRoleId");
                CurrentUser.UserRoleId = Convert.ToInt32(roleid);
            }
            //// To get all the delivery tickets
            int RecordCount = 0;
            var deliveryTickets = new List<DeliveryTicketDto>();
            if (Enddate == DateTime.Today && Startdate == DateTime.Today.AddDays(-(Fourteen)))
            {
                RecordCount = Fourteen;
                deliveryTickets = await DeliveryTicketHttpRepository.GetDeliveryTicketsById(CurrentUser.UserId, (Role)CurrentUser.UserRoleId, RecordCount);
                _deliveryTickets = deliveryTickets;
            }
            else if (Enddate == DateTime.Today && Startdate != DateTime.Today.AddDays(-(Fourteen)))
            {
                TimeSpan TS = Convert.ToDateTime(Enddate) - Convert.ToDateTime(Startdate);
                RecordCount = TS.Days;
                deliveryTickets = await DeliveryTicketHttpRepository.GetDeliveryTicketsById(CurrentUser.UserId, (Role)CurrentUser.UserRoleId, RecordCount);
                if (deliveryTickets is not null)
                {
                    _deliveryTickets = deliveryTickets;
                }
            }
            else
            {
                RecordCount = 0;
                deliveryTickets = await DeliveryTicketHttpRepository.GetDeliveryTicketsById(CurrentUser.UserId, (Role)CurrentUser.UserRoleId, RecordCount);
                if (deliveryTickets is not null)
                {
                    _deliveryTickets = deliveryTickets.Where(x => x.DeliveredAt.Date >= Startdate && x.DeliveredAt.Date <= Enddate).ToList();
                }
            }

            //DeliveryTicketInputDto inputDto= new D eliveryTicketInputDto();
            //inputDto.Id = CurrentUser.UserId;
            //inputDto.RoleId = CurrentUser.UserRoleId;
            //inputDto.FromDate=Startdate.ToString();
            //inputDto.ToDate = Enddate.ToString();
            //var deliveryTickets = await DeliveryTicketHttpRepository.GetDeliveryTicketsByIdTest(inputDto);
            TotalNoofDeliveries = _deliveryTickets.Count;
            TotalNoofCarts = _deliveryTickets.Sum(x => x.NumberOfCarts);
            LoaderVisibility = false;
        }
        catch
        {
            LoaderVisibility = false;
        }
    }
    private async Task ExportExcel()
    {
        try
        {
            var dt = Core.ToDataTable(_deliveryTickets);
            dt.Columns.Remove("Id");
            dt.Columns.Remove("UpdatedAt");
            dt.Columns.Remove("CreatedAt");
            dt.Columns.Remove("Grid");
            dt.Columns.Remove("SignaturePicUrl");
            dt.Columns.Remove("SignOffRequired");
            dt.Columns.Remove("ApprovedByStore");
            dt.Columns.Remove("ServiceProviderId");
            dt.Columns.Remove("StoreId");
            dt.Columns.Remove("DriverId");
            dt.Columns.Remove("PicUrl");
            dt.Columns.Remove("DriverNumber");
            dt.Columns.Remove("IsActive");
            dt.Columns.Remove("UpdatedBy");
            dt.Columns.Remove("DriverStoresIsActive");
            dt.Columns.Remove("StoresIsActive");
            dt.Columns.Remove("TimezoneDiff");
            dt.Columns.Remove("TimezoneName");
            dt.Columns.Remove("TimezoneDateTime");

            dt.Columns["DriverName"].SetOrdinal(0);
            dt.Columns["DeliveryTicketNumber"].SetOrdinal(1);
            dt.Columns["DeliveredAt"].SetOrdinal(2);
            dt.Columns["StoreName"].SetOrdinal(3);
            dt.Columns["StoreNumber"].SetOrdinal(4);
            dt.Columns["NumberOfCarts"].SetOrdinal(5);
            dt.Columns["Signee"].SetOrdinal(6);
            dt.Columns["StreetAddress1"].SetOrdinal(7);
            dt.Columns["StreetAddress2"].SetOrdinal(8);
            dt.Columns["City"].SetOrdinal(9);
            dt.Columns["State"].SetOrdinal(10);
            dt.Columns["PostalCode"].SetOrdinal(11);
            dt.Columns["ServiceFrequency"].SetOrdinal(12);

            var wb = new XLWorkbook();
            var ws = wb.Worksheets.Add("DeliveryReport");
            ws.Cell(1, 1).Value = "Driver Name";
            ws.Cell(1, 2).Value = "Delivery Ticket Number";
            ws.Cell(1, 3).Value = "DeliveredAt";
            ws.Cell(1, 4).Value = "Store Name";
            ws.Cell(1, 5).Value = "Store Number";
            ws.Cell(1, 6).Value = "NumberOfCarts";
            ws.Cell(1, 7).Value = "Signee";
            ws.Cell(1, 8).Value = "Street Address1";
            ws.Cell(1, 9).Value = "Street Address2";
            ws.Cell(1, 10).Value = "City";
            ws.Cell(1, 11).Value = "State";
            ws.Cell(1, 12).Value = "PostalCode";
            ws.Cell(1, 13).Value = "ServiceFrequency";
            

            for (int row = 1; row <= dt.Rows.Count; row++)
            {

                ws.Cell(row + 1, 1).Value = dt.Rows[row - 1]["DriverName"].ToString();
                ws.Cell(row + 1, 2).Value = dt.Rows[row - 1]["DeliveryTicketNumber"].ToString();
                ws.Cell(row + 1, 3).Value = dt.Rows[row - 1]["DeliveredAt"].ToString();
                ws.Cell(row + 1, 4).Value = dt.Rows[row - 1]["StoreName"].ToString();
                var StoreNumber = dt.Rows[row - 1]["StoreNumber"].ToString();
                ws.Cell(row + 1, 5).SetValue<string>(StoreNumber);
                ws.Cell(row + 1, 6).Value = dt.Rows[row - 1]["NumberOfCarts"].ToString();
                ws.Cell(row + 1, 7).Value = dt.Rows[row - 1]["Signee"].ToString();
                ws.Cell(row + 1, 8).Value = dt.Rows[row - 1]["StreetAddress1"].ToString();
                ws.Cell(row + 1, 9).Value = dt.Rows[row - 1]["StreetAddress2"].ToString();
                ws.Cell(row + 1, 10).Value = dt.Rows[row - 1]["City"].ToString();
                ws.Cell(row + 1, 11).Value = dt.Rows[row - 1]["State"].ToString();
                ws.Cell(row + 1, 12).Value = dt.Rows[row - 1]["PostalCode"].ToString();
                ws.Cell(row + 1, 13).Value = dt.Rows[row - 1]["ServiceFrequency"].ToString();

            }

            if (JsModule is null)
            {
                JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            }
            MemoryStream XLSStream = new();
            wb.SaveAs(XLSStream);
            var XLS = XLSStream.ToArray();
            string filename = "DeliveryReport.xlsx";
            await JsModule.InvokeVoidAsync("BlazorDownloadFile", filename, XLS);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

}


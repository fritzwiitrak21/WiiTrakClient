@namespace WiiTrakClient.Shared.StoreCreation.Components
@using System.ComponentModel.DataAnnotations
@using WiiTrakClient.Cores
<style>

    .validation-message {
        font-size: 0;
        display: none;
        font-display: block;
        color: red;
    }

    .mud-input-helper-text.mud-input-error {
        font-size: 0;
    }

    .mud-input-helper-text {
        color: var(--mud-palette-text-secondary);
        margin: 0;
        font-size: 0;
        text-align: start;
        font-weight: 400;
        line-height: 1.66;
        letter-spacing: .03333em;
    }

    .countycode::placeholder {
        color: red;
        opacity: 1;
    }
</style>
<MudDialog Class="dialogstyle">
    <DialogContent>
        <div style="width: 400px;height:550px;overflow-y: auto; overflow-x: hidden;">
            <MudForm Model="@Store" @ref=form @bind-IsValid="@success" @bind-Errors="@errors">
                @if (CurrentUser.UserRoleId == 1 || CurrentUser.UserRoleId == 2)
                {
                    <MudItem Class="my-6">
                        <MudSelect T="CompanyDto" Label="Select Company" Required=true RequiredError=" " Value="@SelectedCompany" ValueChanged="(value) => HandleCompany(value)"
                               AnchorOrigin="Origin.BottomCenter">
                            @foreach (var company in Companies)
                            {
                                <MudSelectItem T="CompanyDto" Value="@company">@company.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
                @if (CurrentUser.UserRoleId == 1 || CurrentUser.UserRoleId == 3 || CurrentUser.UserRoleId == 4)
                {
                    <MudItem Class="my-6">
                        @if (IshasCorporateDetails)
                        {
                            <MudSelect T="CorporateDto" Label="Select Corporate" Required=true RequiredError=" " Value="@SelectedCorporate" ValueChanged="(value) => HandleCorporate(value)"
                               AnchorOrigin="Origin.BottomCenter">
                                @foreach (var corporate in Corporate)
                                {
                                    <MudSelectItem T="CorporateDto" Value="@corporate">@corporate.Name</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            <MudSelect T="CorporateDto" Label="Select Corporate" Required=true RequiredError=" " ValueChanged="(value) => HandleCorporate(value)"
                               AnchorOrigin="Origin.BottomCenter">
                                @foreach (var corporate in Corporate)
                                {
                                    <MudSelectItem T="CorporateDto" Value="@corporate">@corporate.Name</MudSelectItem>
                                }
                            </MudSelect>
                        }
                    </MudItem>
                }
                <MudTextField class="my-6" @bind-Value="Store.StoreName" Label="Store Name" Required="true" RequiredError="" For="@(() => @Store.StoreName)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="Store.StoreNumber" Label="Store Number" Required="true" RequiredError="" For="@(() => @Store.StoreNumber)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="Store.Email" Label="Email" Required="true" RequiredError="" For="@(() => @Store.Email)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="Store.PhonePrimary" Label="Phone Primary" Required="true" RequiredError="" For="@(() => @Store.PhonePrimary)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="Store.PhoneSecondary" Label="Phone Secondary" For="@(() => @Store.PhoneSecondary)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="Store.StreetAddress1" Label="Street Address 1" Required="true" RequiredError="" For="@(() => @Store.StreetAddress1)" Variant="Variant.Text"></MudTextField>
                <MudTextField class="my-6" @bind-Value="Store.StreetAddress2" Label="Street Address 2" For="@(() => @Store.StreetAddress2)" Variant="Variant.Text"></MudTextField>
                <MudSelect T="String" Class="my-0" Value="@SelectedCity" ValueChanged="(value) => HandleCity(value)" Label="City" Required=true RequiredError=" "
                           AnchorOrigin="Origin.BottomCenter">
                    @if (City.Length != 0)
                    {
                        foreach (var item in City)
                        {
                            <MudSelectItem T="String" Value=@item>@item</MudSelectItem>
                        }
                    }
                </MudSelect>

                <MudSelect T="String" Class="my-6" Value="@SelectedState" ValueChanged="(value) => HandleState(value)" Label="State" Required=true RequiredError=" "
                           AnchorOrigin="Origin.BottomCenter">
                    @if (State.Length != 0)
                    {
                        foreach (var item in State)
                        {
                            <MudSelectItem T="String" Value=@item>@item</MudSelectItem>
                        }
                    }
                </MudSelect>

                <MudTextField Class="ZipClass" T="String" Value="@PostalCodeValue" Label="Zip Code" Required="true" RequiredError=" " ValueChanged="(value)=>HandleZipcode(value)" For="@(() => @Store.PostalCode)" Variant="Variant.Text"></MudTextField>

                <div Class="Mudsearchselect">
                    @if (SelectedCounty != "")
                    {
                        <label id="targetlabel">County Code*</label>
                    }
                    <input type="text" list="textsearch" Class="inputselect my-6" placeholder="County Code*" value="@SelectedCounty" @onkeyup="OnClick" @onchange="eventArgs => { OnSelect(eventArgs.Value); }" />

                    <datalist id="textsearch">
                        @foreach (var county in County)
                        {
                            <option value="@county" />
                        }
                    </datalist>
                </div>
                <MudItem>
                    <MudSelect T="String" ValueChanged="(value) => HandleServiceFrequency(value)" Value="@SelectedService" Label="Select Service Frequency" Required=true RequiredError=" "
                               AnchorOrigin="Origin.BottomCenter">

                        <MudSelectItem T="String" Value=@("1 time a week")>1 time a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("2 times a week")>2 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("3 times a week")>3 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("4 times a week")>4 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("5 times a week")>5 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("6 times a week")>6 times a week</MudSelectItem>
                        <MudSelectItem T="String" Value=@("7 times a week")>7 times a week</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudDatePicker Label="" Editable="true" Class="my-4" MinDate="MinDate" @bind-Date="Store.StartDate" Placeholder="Select Start Date" Required=true RequiredError=" " For="@(() => @Store.StartDate)" />
                @*<MudDatePicker Label="Start Date" Editable="true" MaxDate="MinDate" @bind-Date="SelectedDate" Placeholder="Select Start Date" />*@
                <MudSwitch @bind-Checked="Store.IsActive" Label=@(Store.IsActive? "Activate":"Deactivate") Color="Color.Primary" For="@(() => @Store.IsActive)" />
                <MudSwitch @bind-Checked="Store.IsConnectedStore" Label=@(Store.IsConnectedStore? "Connected":"Disconnected") Color="Color.Primary" />
                <div class="d-flex SubmitGrp">
                    <MudButton OnClick="Cancel">Cancel</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Class="ml-auto">Update</MudButton>
                </div>
            </MudForm>
        </div>
    </DialogContent>
</MudDialog>


@code {
    [Parameter]
    public StoreDto? Store { get; set; }

    [Parameter]
    public List<CorporateDto>? Corporate { get; set; } = new();


    [Parameter]
    public List<CompanyDto>? Companies { get; set; } = new();

    [Parameter]
    public List<CountyCodeDTO>? CountyCodeList { get; set; } = new();
    public List<CountyCodeDTO> TempCountyCodeList { get; set; } = new();
    CorporateDto SelectedCorporate = new();
    CompanyDto SelectedCompany = new();
    public CountyCodeDTO SelectedCountyCode = new();
    bool StoreStatus = false;
    [Inject]
    public ICorporateHttpRepository CorporateRepository { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    bool success;
    bool IshasCorporateDetails;
    string[] errors = { };
    string[] County;
    string[] City;
    string[] State;
    string SelectedCounty = "";
    string SelectedService = "";
    public string SelectedCity = "";
    public string SelectedState = "";
    public string PostalCodeValue = "";
    DateTime? MinDate { get; set; } = Convert.ToDateTime("12/01/2021");
    MudForm form;
    [Inject] IJSRuntime JsRuntime { get; set; }
    private IJSObjectReference JsModule;
    bool IsValidCountyCode = true;
    protected override void OnParametersSet()
    {
        if (CurrentUser.UserRoleId == 2)
        {
            Store.CorporateId = CurrentUser.UserId;
        }
        else if (CurrentUser.UserRoleId == 3 || CurrentUser.UserRoleId == 4)
        {
            Store.CompanyId = CurrentUser.UserId;
        }
        if (Corporate != null && Corporate.Count > 0)
        {
            SelectedCorporate = Corporate.Where(x => x.Id == Store.CorporateId).FirstOrDefault();
            IshasCorporateDetails = true;
        }
        if (Companies != null && Companies.Count > 0)
        {
            SelectedCompany = Companies.Where(x => x.Id == Store.CompanyId).FirstOrDefault();
        }
        if (Store.ServiceFrequency != null && Store.ServiceFrequency != "")
        {
            SelectedService = Store.ServiceFrequency;
        }
        else
        {
            SelectedService = "1 time a week";
        }

        if (Store.StartDate == null)
        {
            Store.StartDate = MinDate;
        }
        if (CountyCodeList.Count > 0)
        {
            SelectedCounty = Store.CountyCode;
            SelectedCity = Store.City;
            SelectedState = Store.State;
            PostalCodeValue = Store.PostalCode;
            try
            {
                string[] TempCity = new string[CountyCodeList.Count];
                string[] C = new string[CountyCodeList.Count];
                int j = 0;
                for (int i = 0; i < CountyCodeList.Count; i++)
                {
                    SelectedCountyCode = CountyCodeList[i];
                    if (!(TempCity.Contains(SelectedCountyCode.City)))
                    {
                        TempCity[j] = SelectedCountyCode.City;
                        C[j] = SelectedCountyCode.CountyCode;
                        j++;
                    }
                }
                Array.Resize(ref TempCity, j);
                County = (string[])C.Clone();
                City = (string[])TempCity.Clone();

            }
            catch (Exception ex)
            {

            }
        }
        StoreStatus = Store.IsActive;
    }
    public async Task HandleServiceFrequency(string value)
    {

        SelectedService = value;
        Store.ServiceFrequency = value;
    }
    public async Task HandleCity(string value)
    {
        SelectedCity = value;
        Store.City = value;
        SelectedState = "";
        SelectedCounty = "";
        IsValidCountyCode = false;
        TempCountyCodeList = CountyCodeList.Where(x => x.City == value).ToList();
        if (TempCountyCodeList.Count > 0)
        {
            try
            {
                int j = 0;
                int k = 0;
                string[] TempState = new string[TempCountyCodeList.Count];
                string[] C = new string[TempCountyCodeList.Count];
                for (int i = 0; i < TempCountyCodeList.Count; i++)
                {
                    SelectedCountyCode = TempCountyCodeList[i];
                    if (!(TempState.Contains(SelectedCountyCode.State)))
                    {
                        TempState[j] = SelectedCountyCode.State;
                        j++;
                    }
                    if (!(C.Contains(SelectedCountyCode.CountyCode)))
                    {
                        C[k] = SelectedCountyCode.CountyCode;
                        k++;
                    }
                }
                Array.Resize(ref TempState, j);
                Array.Resize(ref C, k);
                State = (string[])TempState.Clone();
                County = (string[])C.Clone();
            }
            catch (Exception ex)
            {
                //Exception
            }
        }
    }
    public async Task HandleState(string value)
    {
        SelectedState = value;
        Store.State = value;
        SelectedCounty = "";
        IsValidCountyCode = false;
        TempCountyCodeList = CountyCodeList.Where(x => x.City == Store.City && x.State == Store.State).ToList();
        if (TempCountyCodeList.Count > 0)
        {
            try
            {
                int j = 0;
                string[] C = new string[TempCountyCodeList.Count];
                for (int i = 0; i < TempCountyCodeList.Count; i++)
                {
                    SelectedCountyCode = TempCountyCodeList[i];
                    if (!(C.Contains(SelectedCountyCode.CountyCode)))
                    {
                        C[j] = SelectedCountyCode.CountyCode;
                        j++;
                    }
                }
                Array.Resize(ref C, j);
                County = (string[])C.Clone();
            }
            catch (Exception ex)
            {
                //Exception
            }
        }
    }
    public async Task HandleZipcode(string value)
    {
        PostalCodeValue = value;
        Store.PostalCode = value;
        SelectedCounty = "";
        IsValidCountyCode = false;
        TempCountyCodeList = CountyCodeList.Where(x => x.ZipCode == value).ToList();
        if (TempCountyCodeList.Count == 0)
        {
            TempCountyCodeList = CountyCodeList.Where(x => x.City == Store.City && x.State == Store.State).ToList();
        }
        if (TempCountyCodeList.Count > 0)
        {
            try
            {
                int j = 0;
                string[] C = new string[TempCountyCodeList.Count];
                for (int i = 0; i < TempCountyCodeList.Count; i++)
                {
                    SelectedCountyCode = TempCountyCodeList[i];
                    if (!(C.Contains(SelectedCountyCode.CountyCode)))
                    {
                        C[j] = SelectedCountyCode.CountyCode;
                        j++;
                    }
                }
                Array.Resize(ref C, j);
                County = (string[])C.Clone();
            }
            catch (Exception ex)
            {
                //Exception
            }
        }
    }
    private async Task OnClick()
    {
        if (JsModule is null)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
        }

        var inputtext = await JsModule.InvokeAsync<string>("getTextBoxValue");
        if (inputtext == "")
        {
            await JsModule.InvokeVoidAsync("addValidationCountycodeClass");
            StateHasChanged();
        }
        else
        {
            await JsModule.InvokeVoidAsync("removeValidationCountycodeClass");
            StateHasChanged();
        }
    }
    private async Task OnSelect(object e)
    {
        try
        {
            if (JsModule is null)
            {
                JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            }
            if (County.Contains(e))
            {

                Store.CountyCode = e.ToString();
                SelectedCounty = e.ToString();
                if (success)
                {
                    success = true; // Enable the Save button when other fields are valid
                }
                else
                {
                    success = false;// Disable the Save button when other fields are valid
                }
                IsValidCountyCode = true;
            }
            else
            {
                SelectedCounty = e.ToString();
                await JsModule.InvokeVoidAsync("addValidationCountycodeClass");
                IsValidCountyCode = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
        }
    }
    public async Task HandleCompany(CompanyDto company)
    {
        Store.CompanyId = company.Id;
        SelectedCompany = company;
        try
        {

            if (company.ParentId == null)
            {
                Corporate = await CorporateRepository.GetCorporatesByCompanyId(company.Id);
            }
            else if (company.ParentId != null)
            {
                Corporate = await CorporateRepository.GetCorporatesByCompanyId((Guid)company.ParentId);
            }
            if (Corporate != null)
            {
                SelectedCorporate = Corporate[0];
                IshasCorporateDetails = true;
                Store.CorporateId = SelectedCorporate.Id;
            }
            else
            {
                IshasCorporateDetails = false;
                success = false;
            }
        }
        catch (Exception ex)
        {

        }
    }
    public async Task HandleCorporate(CorporateDto corporate)
    {
        Store.CorporateId = corporate.Id;
        SelectedCorporate = corporate;
    }

    public async Task Submit()
    {
        form.Validate();
        if (JsModule is null)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
        }
        if (!IsValidCountyCode)
        {
            await JsModule.InvokeVoidAsync("addValidationCountycodeClass");
            StateHasChanged();
        }
        if (success && errors.Length == 0 && IsValidCountyCode)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
}
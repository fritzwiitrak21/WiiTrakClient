@using WiiTrakClient.Shared.Components
@using WiiTrakClient.Shared.StoreCreation.Components
@using WiiTrakClient.Shared.Map
@inject IDialogService DialogService

@inject IStoreHttpRepository StoreHttpRepository
@inject ICorporateHttpRepository CorporateRepository
@inject ICompanyHttpRepository CompanyRepository
@inject ICountyCodeHttpRepository CountyCodeRepository

@using WiiTrakClient.Cores



<MudTable Items="@Stores" Hover="true" Class="Pagingstyle" SortLabel="Sort By">
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<StoreDto, object>(x=>x.StoreName)">Store Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<StoreDto, object>(x=>x.StoreNumber)">Store Number</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.StreetAddress1)">Street Address</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.City)">City</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.State)">State</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.PostalCode)">Postal Code</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.CountyCode)">County Code</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.ServiceFrequency)">Service Frequency</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<StoreDto, object>(x=>x.PhonePrimary)">Phone</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Store Name">
            @context.StoreName
        </MudTd>
        <MudTd DataLabel="Store Number">
            @context.StoreNumber
        </MudTd>
        <MudTd DataLabel="Street Address 1">
            @context.StreetAddress1
        </MudTd>
        <MudTd DataLabel="City">
            @context.City
        </MudTd>
        <MudTd DataLabel="State">
            @context.State
        </MudTd>
        <MudTd DataLabel="Postal Code">
            @context.PostalCode
        </MudTd>
        <MudTd DataLabel="County Code">
            @context.CountyCode
        </MudTd>
        <MudTd DataLabel="Service Frequency">
            @context.ServiceFrequency
        </MudTd>
        <MudTd DataLabel="Email">
            @context.Email
        </MudTd>
        <MudTd DataLabel="Phone">
            @context.PhonePrimary
        </MudTd>
        <MudTd DataLabel="Action">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="((e) => OpenDialog(context))">
                Update
            </MudButton>
        </MudTd>
        <MudTd>
            @if (context.IsConnectedStore)
            {
                <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Brush"
                       Style="background-color:blueviolet;color:white;"
                       OnClick="((e) => DrawGeoFence(context))">
                    Fencing
                </MudButton>
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public List<StoreDto>? Stores { get; set; } = null;
    private bool _enabled = true;
    public CompanyDto Company { get; set; }
    public List<CorporateDto> Corporate { get; set; } = new();
    public List<CompanyDto> Companies { get; set; } = new();
    public List<CountyCodeDTO> CountyCode { get; set; } = new();
    public async Task DrawGeoFence(StoreDto store)
    {
        var parameters = new DialogParameters();
        parameters.Add("Store", store);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };
        var dialog = DialogService.Show<DisplayStoreFencingMap>("Fencing for the store " + store.StoreName + " - " + store.StoreNumber, parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var StoreUpdate = new StoreDto
                {
                    Id = store.Id,
                    FenceCoords = store.FenceCoords,
                };
            try
            {
                await StoreHttpRepository.UpdateStoreFenceAsync(StoreUpdate);
            }
            catch { }
            await RefreshGrid();
        }
    }
    public async Task OpenDialog(StoreDto store)
    {

        // TODO Update for store

        //if (CurrentUser.UserRole == "PrimeCompany")
        //{
        //    Corporate = await CorporateRepository.GetCorporatesByCompanyId(CurrentUser.UserId);

        //}
        //else if (CurrentUser.UserRole == "SubContractor")
        //{
        //    Company = await CompanyRepository.GetParentCompanyAsync(CurrentUser.UserId);
        //    Corporate = await CorporateRepository.GetCorporatesByCompanyId((Guid)Company.ParentId);
        //}
        if (CurrentUser.UserRoleId == 1)
        {
            Companies = await CompanyRepository.GetCompaniesBySystemOwnerIdAsync(CurrentUser.UserId);
            Corporate = await CorporateRepository.GetCorporatesByCompanyId(store.CompanyId);
        }
        else if (CurrentUser.UserRoleId == 2)
        {
            Companies = await CompanyRepository.GetCompaniesByCorporateIdAsync(CurrentUser.UserId);
        }
        else if (CurrentUser.UserRoleId == 3)
        {
            Corporate = await CorporateRepository.GetCorporatesByCompanyId(CurrentUser.UserId);
        }
        else if (CurrentUser.UserRoleId == 4)
        {
            var ParentCompany = await CompanyRepository.GetParentCompanyAsync(CurrentUser.UserId);
            Corporate = await CorporateRepository.GetCorporatesByCompanyId((Guid)ParentCompany.ParentId);
        }
        // Companies = await CompanyRepository.GetCompaniesBySystemOwnerIdAsync(CurrentUser.UserId);
        //Corporate = await CorporateRepository.GetCorporatesByCompanyId(store.CompanyId);

        CountyCode = await CountyCodeRepository.GetCountyListAsync();

        var parameters = new DialogParameters();
        parameters.Add("Store", store);
        parameters.Add("Corporate", Corporate);
        parameters.Add("Companies", Companies);
        parameters.Add("CountyCodeList", CountyCode);
        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };
        var dialog = DialogService.Show<UpdateStoreDialog>("Update Store", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // save updated store to backend
            var StoreUpdate = new StoreDto
                {
                    StoreName = store.StoreName,
                    StreetAddress1 = store.StreetAddress1,
                    StreetAddress2 = store.StreetAddress2,
                    City = store.City,
                    State = store.State,
                    PostalCode = store.PostalCode,
                    ProfilePicUrl = store.ProfilePicUrl,
                    Email = store.Email,
                    PhonePrimary = store.PhonePrimary,
                    PhoneSecondary = store.PhoneSecondary,
                    ServiceProviderId = Guid.Empty,
                    CorporateId = store.CorporateId,
                    CompanyId = store.CompanyId,
                    StoreNumber = store.StoreNumber,
                    IsActive = store.IsActive,
                    CountyCode = store.CountyCode,
                    ServiceFrequency = store.ServiceFrequency,
                    StartDate = store.StartDate,
                    IsConnectedStore = store.IsConnectedStore,
                    Id = store.Id,
                    CreatedAt = store.CreatedAt,
                    CreatedBy=CurrentUser.UserId
                };
            try
            {
                await StoreHttpRepository.UpdateStoreAsync(store.Id, StoreUpdate);
            }
            catch(Exception ex)
            {
                //Exception
            }
        }
        await RefreshGrid();
    }
    async Task RefreshGrid()
    {
        switch (CurrentUser.UserRoleId)
        {
            case 1:
                Stores = await StoreHttpRepository.GetStoresBySystemOwnerId(CurrentUser.UserId);
                break;
            case 2:
                Stores = await StoreHttpRepository.GetStoresByCorporateId(CurrentUser.UserId);
                break;
            case 3:
            case 4:
                Stores = await StoreHttpRepository.GetStoresByCompanyId(CurrentUser.UserId);
                break;
        }
        StateHasChanged();
    }
}
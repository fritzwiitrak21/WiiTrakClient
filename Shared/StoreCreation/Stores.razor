@page "/stores-creation"
@using WiiTrakClient.Shared.StoreCreation.Components
@using WiiTrakClient.Cores
@inject IJSRuntime JsRuntime
@inject IDialogService DialogService
@inject IStoreHttpRepository StoreHttpRepository

<UserAuthentication />
<h1>Stores</h1>

<div class="d-flex justify-end">
    <MudButton Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add"
               IconColor="Color.Secondary"
               Size="Size.Large"
               OnClick="OpenDialog">Add</MudButton>
</div>

<div class="my-8">
    @if (LoaderVisibility)
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
    }
    else
    {
        if (stores.Count > 0)
        {
            <StoreList Stores="@stores" />
        }
        else
        {
            <MudText Class="my-4" Typo="Typo.h6">No data found.</MudText>
        }
    }
</div>

@code {
    List<StoreDto> stores = new();
    StoreDto AddStore = new();
    bool LoaderVisibility = false;
    private IJSObjectReference JsModule;
    protected override async Task OnInitializedAsync()
    {
        LoaderVisibility = true;
        if (CurrentUser.UserId == Guid.Empty)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            var Id = await JsModule.InvokeAsync<string>("getUserId");
            CurrentUser.UserId = new Guid(Id);
        }
       await RefreshGrid();
        //stores = await StoreHttpRepository.GetStoresBySystemOwnerId(CurrentUser.UserId);
        LoaderVisibility = false;
    }
    private async Task OpenDialog()
    {
        var parameters = new DialogParameters();
        AddStore = new StoreDto();
        parameters.Add("NewStore", AddStore);
        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };
        var dialog = DialogService.Show<AddStoreDialog>("Add Store", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            // add new store to backend
            var StoreCreation = new StoreDto
                {
                    CompanyId = AddStore.CompanyId,
                    StoreName = AddStore.StoreName,
                    StoreNumber = AddStore.StoreNumber,
                    Email = AddStore.Email,
                    PhonePrimary = AddStore.PhonePrimary,
                    PhoneSecondary = AddStore.PhoneSecondary,
                    StreetAddress1 = AddStore.StreetAddress1,
                    StreetAddress2 = AddStore.StreetAddress2,
                    City = AddStore.City,
                    State = AddStore.State,
                    PostalCode = AddStore.PostalCode,
                    CorporateId = AddStore.CorporateId,
                    ServiceProviderId = Guid.Empty,
                    IsSignatureRequired = AddStore.IsSignatureRequired,
                    IsActive = true,
                    CountyCode = AddStore.CountyCode,
                    ServiceFrequency = AddStore.ServiceFrequency,
                    StartDate = AddStore.StartDate,
                    IsConnectedStore=AddStore.IsConnectedStore,
                    CreatedBy=CurrentUser.UserId
                };
            try
            {
                await StoreHttpRepository.CreateStoreAsync(StoreCreation);
            }
            catch(Exception ex)
            {
                //Exception
            }
            await RefreshGrid();
        }
    }
     async Task RefreshGrid()
    {
        switch (CurrentUser.UserRoleId)
        {
            case 1:
                stores = await StoreHttpRepository.GetStoresBySystemOwnerId(CurrentUser.UserId);
                break;
            case 2:
                stores = await StoreHttpRepository.GetStoresByCorporateId(CurrentUser.UserId);
                break;
            case 3:
            case 4:
                stores = await StoreHttpRepository.GetStoresByCompanyId(CurrentUser.UserId);
                break;
        }
        StateHasChanged();
    }
}
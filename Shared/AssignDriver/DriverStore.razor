@page "/assign-driver-store"
@using WiiTrakClient.Cores
@using WiiTrakClient.Shared.AssignDriver.Components

<UserAuthentication />
<div class="my-8">
    <MudGrid class="my-8">
        <MudItem xs="12" sm="6" md="4">
            <MudSelect T="DriverDto" Label="Select Driver" ValueChanged="(value) => HandleDriverSelected(value)"
                       AnchorOrigin="Origin.BottomCenter">
                @foreach (var driver in Drivers)
                {
                    <MudSelectItem T="DriverDto" Value="@driver">@driver.FirstName @driver.LastName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <div style="padding-top:6px" id="RadioList" class="HideRadioList">
                <MudForm>
                    <MudRadioGroup @bind-SelectedOption="@SelectedOption">
                        <MudRadio Option="@("All")" Color="Color.Primary">All</MudRadio>
                        <MudRadio Option="@("Assigned")" Color="Color.Primary">Assigned</MudRadio>
                        <MudRadio Option="@("Unassigned")" Color="Color.Primary">Unassigned</MudRadio>
                    </MudRadioGroup>
                </MudForm>
            </div>
        </MudItem>
        @{
            GetStoreDetails();
        }

    </MudGrid>
</div>
@if (driverstore.Count > 0)
{
    <DriverStoreList driverstore="driverstore" />
}
else
{
    <label>No Stores found</label>
}

@code {
    public string SelectedOption { get; set; } = "";
    public string TempSelectedOption { get; set; } = "";
    public List<DriverDto> Drivers { get; set; } = new();

    public List<DriverStoreDetailsDto> driverstore { get; set; } = new();
    public List<DriverStoreDetailsDto> alldriverstore { get; set; } = new();
    public DriverDto SelectedDriver = new();

    [Inject]
    public IDriverStoresHttpRepository DriverStoreRepository { get; set; }

    [Inject]
    public IDriverHttpRepository DriverRepository { get; set; }
    [Inject] IJSRuntime JsRuntime { get; set; }
    private IJSObjectReference JsModule;


    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.UserId == Guid.Empty)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            var Id = await JsModule.InvokeAsync<string>("getUserId");
            CurrentUser.UserId = new Guid(Id);
        }
        if (CurrentUser.UserRoleId == 1)
        {
            Drivers = await DriverRepository.GetDriversBySystemOwnerIdAsync(CurrentUser.UserId);
        }
        else if (CurrentUser.UserRoleId == 3 || CurrentUser.UserRoleId == 4)
        {
            Drivers = await DriverRepository.GetDriversByCompanyIdAsync(CurrentUser.UserId);
        }
    }

    private async Task HandleDriverSelected(DriverDto Driver)
    {
        if (CurrentUser.UserRoleId == 1)
        {
            alldriverstore = await DriverStoreRepository.GetDriverStoresBySystemownerIdAsync(CurrentUser.UserId, Driver.Id);
        }
        else if (CurrentUser.UserRoleId == 3 || CurrentUser.UserRoleId == 4)
        {
            alldriverstore = await DriverStoreRepository.GetDriverStoresByCompanyIdAsync(CurrentUser.UserId, Driver.Id);
        }
        //alldriverstore = await DriverStoreRepository.GetDriverStoresBySystemownerIdAsync(CurrentUser.UserId, Driver.Id);
        driverstore = alldriverstore;
        StateHasChanged();
        Core.SelectedDriverId = Driver.Id;
        SelectedOption = "All";
        if (JsModule is null)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
        }

        await JsModule.InvokeVoidAsync("ShowRadioListClass");
        GetStoreDetails();
        StateHasChanged();
    }

    public async Task GetStoreDetails()
    {
        if (TempSelectedOption != SelectedOption)
        {
            var value = SelectedOption;
            TempSelectedOption = SelectedOption;
            if (value == "All")
            {
                if (CurrentUser.UserRoleId == 1)
                {
                    alldriverstore = await DriverStoreRepository.GetDriverStoresBySystemownerIdAsync(CurrentUser.UserId, Core.SelectedDriverId);
                }
                else if (CurrentUser.UserRoleId == 3 || CurrentUser.UserRoleId == 4)
                {
                    alldriverstore = await DriverStoreRepository.GetDriverStoresByCompanyIdAsync(CurrentUser.UserId, Core.SelectedDriverId);
                }
                driverstore = alldriverstore;
                StateHasChanged();
            }
            else if (value == "Assigned")
            {
                if (CurrentUser.UserRoleId == 1)
                {
                    alldriverstore = await DriverStoreRepository.GetDriverStoresBySystemownerIdAsync(CurrentUser.UserId, Core.SelectedDriverId);
                }
                else if (CurrentUser.UserRoleId == 3 || CurrentUser.UserRoleId == 4)
                {
                    alldriverstore = await DriverStoreRepository.GetDriverStoresByCompanyIdAsync(CurrentUser.UserId, Core.SelectedDriverId);
                }
                driverstore = alldriverstore.Where(x => x.DriverStoresIsActive).ToList();
                StateHasChanged();
            }
            else if (value == "Unassigned")
            {
                if (CurrentUser.UserRoleId == 1)
                {
                    alldriverstore = await DriverStoreRepository.GetDriverStoresBySystemownerIdAsync(CurrentUser.UserId, Core.SelectedDriverId);
                }
                else if (CurrentUser.UserRoleId == 3 || CurrentUser.UserRoleId == 4)
                {
                    alldriverstore = await DriverStoreRepository.GetDriverStoresByCompanyIdAsync(CurrentUser.UserId, Core.SelectedDriverId);
                }
                driverstore = alldriverstore.Where(x => x.DriverStoresIsActive == false && x.AssignedDriver.Length == 0).ToList();
                StateHasChanged();
            }
        }
    }
}

@page "/companies-creation"

@using WiiTrakClient.Shared.CompanyCreation.Components
@using WiiTrakClient.Cores

@inject IJSRuntime JsRuntime
@inject ICompanyHttpRepository CompanyRepository
@inject IDialogService DialogService


<UserAuthentication />
<h1>WiiTrak Companies</h1>

<div class="d-flex justify-end">
    @if (CurrentUser.UserRoleId != 2)
    {
        <MudButton Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add"
               IconColor="Color.Secondary"
               Size="Size.Large"
               OnClick="OpenDialog">Add</MudButton>
    }
</div>

<div class="my-8">
    @if (CompaniesList == null)
    {
        <MudText Class="my-4" Typo="Typo.h6">No data found.</MudText>
    }
    else if (companies.Count > 0)
    {
        <CompanyList Companies="@companies" />
    }
    else
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" Class="my-7" />
    }

</div>



@code {
    List<CompanyDto> companies = new();
    List<CompanyDto> CompaniesList = new();

    CompanyDto AddCompany = new();
    private IJSObjectReference JsModule;

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.UserId == Guid.Empty)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
            var Id = await JsModule.InvokeAsync<string>("getUserId");
            CurrentUser.UserId = new Guid(Id);
        }
        await RefreshGrid();

    }

    private async Task OpenDialog()
    {
        try
        {
            var parameters = new DialogParameters();
            AddCompany = new CompanyDto();
            parameters.Add("NewCompany", AddCompany);

            DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };

            var dialog = DialogService.Show<AddCompanyDialog>("Add Company", parameters);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                // add new customer to backend
                var CompanyCreation = new CompanyDto
                    {
                        Name = AddCompany.Name,
                        StreetAddress1 = AddCompany.StreetAddress1,
                        StreetAddress2 = AddCompany.StreetAddress2,
                        City = AddCompany.City,
                        State = AddCompany.State,
                        PostalCode = AddCompany.PostalCode,
                        ProfilePicUrl = AddCompany.ProfilePicUrl,
                        Email = AddCompany.Email,
                        PhonePrimary = AddCompany.PhonePrimary,
                        PhoneSecondary = AddCompany.PhoneSecondary,
                        //SystemOwnerId = CurrentUser.UserId,
                    };
                switch (CurrentUser.UserRoleId)
                {
                    case 1:
                        CompanyCreation.SystemOwnerId = CurrentUser.UserId;
                        break;
                    case 2:
                        CompanyCreation.CorporateId = CurrentUser.UserId;
                        break;
                    case 3:
                        CompanyCreation.ParentId = CurrentUser.UserId;
                        break;
                }
                try
                {
                    await CompanyRepository.CreateCompanyAsync(CompanyCreation);
                }
                catch(Exception ex)
                {
                    //Exception
                }
            }
            await RefreshGrid();
        }
        catch (Exception ex)
        {
            //Exception
        }
    }
    async Task RefreshGrid()
    {
        switch (CurrentUser.UserRoleId)
        {
            case 1:
                CompaniesList = await CompanyRepository.GetCompaniesBySystemOwnerIdAsync(CurrentUser.UserId);
                break;
            case 2:
                CompaniesList = await CompanyRepository.GetCompaniesByCorporateIdAsync(CurrentUser.UserId);
                break;
            case 3:
                CompaniesList = await CompanyRepository.GetChildCompaniesAsync(CurrentUser.UserId);
                break;
        }


        if (CompaniesList is not null)
        {
            companies = CompaniesList;
        }
        StateHasChanged();
    }
}
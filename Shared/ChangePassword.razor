@page "/change-password"
@using WiiTrakClient.Cores
@using WiiTrakClient.HttpRepository
@using WiiTrakClient.Shared.Components
@inject NavigationManager NavManager 
@inject ILoginHttpRepository LoginHttpRepository
@inject IDialogService DialogService


<style>
    .validation-message {
    font-size:0;
    display:none;
    font-display:block;
    color: red;
    }
    .mud-input-helper-text.mud-input-error {
    font-size: 0;
    }
    .mud-input-helper-text {
    color: var(--mud-palette-text-secondary);
    margin: 0;
    font-size: 0;
    
    }
</style>

<h3></h3>
<MudCard Outlined="true" Class="pa-5">
    <MudCardHeader>
        <CardHeaderContent> 
            <MudText Typo="Typo.h4">Change Password</MudText>
        </CardHeaderContent>
           
    </MudCardHeader>
    <MudCardContent> 
        <EditForm Model="@changePassword" OnValidSubmit="OnSubmit"> 
                        <DataAnnotationsValidator />
            <MudTextField InputType="InputType.Password" @bind-Value="@changePassword.Password"  For="@(() => changePassword.Password)" Required="true" RequiredError=" " Label="Current Password" Variant="Variant.Outlined"></MudTextField>
            <MudTextField InputType="InputType.Password" @bind-Value="@changePassword.NewPassword" For="@(() => changePassword.NewPassword)" Required="true" RequiredError=" " Label="New Password" Variant="Variant.Outlined"></MudTextField>
            <MudTextField InputType="InputType.Password" @bind-Value="@changePassword.ConfirmNewPassword" For="@(() => changePassword.ConfirmNewPassword)" Required="true" RequiredError=" " Label="Confirm New Password" Variant="Variant.Outlined"></MudTextField>
            <br /> 
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick=OnSubmit>Update Password</MudButton> 
        </EditForm>
    </MudCardContent> 
</MudCard>

@code {
    private ResetPasswordDto reset = new ResetPasswordDto();
    private ChangePasswordDto changePassword = new ChangePasswordDto();
    private string SuccessMessage { get; set; } = "";
    private string ErrorMessage { get; set; } = "";

    private async void OnSubmit()
    {
        SuccessMessage = "";
        ErrorMessage = "";
        try
        {
            var CurrentPassword = Core.Base64Encrypt(changePassword.Password);
            if(CurrentUser.Password==CurrentPassword && changePassword.Password!=changePassword.NewPassword && changePassword.NewPassword==changePassword.ConfirmNewPassword)
            {
                reset.NewPassword = reset.ConfirmPassword = Core.Base64Encrypt(changePassword.NewPassword);
                await LoginHttpRepository.UpdatePasswordAsync(CurrentUser.UserId, reset);
                SuccessMessage = "Password Changed Succesfully";
                #region Show Message Dialog
                var parameters = new DialogParameters();
                parameters.Add("DisplayMessage", SuccessMessage);
                parameters.Add("FromWindow", "ChangePassword");
                parameters.Add("IsSuccessNotification", true);

                DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };

                var dialog = DialogService.Show<ShowMessageDialog>("Notification", parameters);
                var result = await dialog.Result;
                if (!result.Cancelled)
                {
                    NavManager.NavigateTo("/logout");
                }
                #endregion
            }
            else
            {
                ErrorMessage = "Incorrect Password";
                #region Show Message Dialog
                var parameters = new DialogParameters();
                parameters.Add("DisplayMessage", ErrorMessage);
                parameters.Add("FromWindow", "ChangePassword");
                parameters.Add("IsSuccessNotification", false);

                DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Large };

                var dialog = DialogService.Show<ShowMessageDialog>("Notification", parameters);
                var result = await dialog.Result;
                #endregion
            }
        }
        catch(Exception ex)
        {

        }
    }
}

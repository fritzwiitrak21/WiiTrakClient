@page "/index"
@using WiiTrakClient.Services
@using WiiTrakClient.Cores
@using WiiTrakClient.Shared.Chart
@using WiiTrakClient.Shared.Components
@inject INotificationHttpRepository NotifyHttpRepository

<UserAuthentication />
<PageTitle>WiiTrak</PageTitle>
<h2>Welcome to WiiTrak</h2>

@code {
    [Inject] IJSRuntime JsRuntime { get; set; }
    private IJSObjectReference JsModule;
    protected override async Task OnInitializedAsync()
    {
        JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
        if (CurrentUser.UserId == Guid.Empty)
        {
            var Id = await JsModule.InvokeAsync<string>("getUserId");
            CurrentUser.UserId = new Guid(Id);
            var roleid = await JsModule.InvokeAsync<string>("getUserRoleId");
            CurrentUser.UserRoleId = Convert.ToInt32(roleid);
        }
        Core.NotificationsList = await NotifyHttpRepository.GetNotificationIdAsync(CurrentUser.UserId);
        Core.NotificationCount = Core.NotificationsList.Where(x => x.IsNotified == false).Count();
        StateHasChanged();

        if (CurrentUser.UserRoleId == 5)
        {
            await JsModule.InvokeVoidAsync("getCoord", false);
            var CurrentCoord = await JsModule.InvokeAsync<string>("getCoordinates");
            await JsModule.InvokeVoidAsync("ClearCoord");
        }
    }
}
@if (Core.NotificationsList.Count > 0 && CurrentUser.UserRoleId == 5)
{
    <NotificationPanel />
}
@if (CurrentUser.UserRoleId <= 4 && Core.ServiceBoardCount>0)
{
    <ServiceBoardChart />
}
